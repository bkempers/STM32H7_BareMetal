
bare_metal_Appli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002b0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001358  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001608  08001608  00002608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001650  08001650  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001650  08001650  00002650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001658  08001658  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001658  08001658  00002658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800165c  0800165c  0000265c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  24000000  08001660  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2400005c  080016bc  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000000  20000000  00004000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000108e  00000000  00000000  0000308a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004d4  00000000  00000000  00004118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000160  00000000  00000000  000045f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000f6  00000000  00000000  00004750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025988  00000000  00000000  00004846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001767  00000000  00000000  0002a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4df1  00000000  00000000  0002b935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100726  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c34  00000000  00000000  0010076c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001013a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400005c 	.word	0x2400005c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080015f0 	.word	0x080015f0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000060 	.word	0x24000060
 80002ec:	080015f0 	.word	0x080015f0

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <led_init>:
#define LED1_PIN (1U<<10)  // PD10 - Green LED
#define LED2_PIN (1U<<13)  // PD13 - Yellow LED
#define LED3_PIN (1U<<7)   // PB7 - Red LED

void led_init(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
    // Enable GPIO clocks
    RCC->AHB4ENR |= GPIOBEN | GPIODEN;
 8000394:	4b12      	ldr	r3, [pc, #72]	@ (80003e0 <led_init+0x50>)
 8000396:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800039a:	4a11      	ldr	r2, [pc, #68]	@ (80003e0 <led_init+0x50>)
 800039c:	f043 030a 	orr.w	r3, r3, #10
 80003a0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

    // Configure LED pins as outputs
    // LED1 (PD10) and LED2 (PD13)
    GPIOD->MODER |= (1U<<20) | (1U<<26);  // Set bits for output mode
 80003a4:	4b0f      	ldr	r3, [pc, #60]	@ (80003e4 <led_init+0x54>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a0e      	ldr	r2, [pc, #56]	@ (80003e4 <led_init+0x54>)
 80003aa:	f043 6382 	orr.w	r3, r3, #68157440	@ 0x4100000
 80003ae:	6013      	str	r3, [r2, #0]
    GPIOD->MODER &= ~((1U<<21) | (1U<<27)); // Clear upper bits
 80003b0:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <led_init+0x54>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a0b      	ldr	r2, [pc, #44]	@ (80003e4 <led_init+0x54>)
 80003b6:	f023 6302 	bic.w	r3, r3, #136314880	@ 0x8200000
 80003ba:	6013      	str	r3, [r2, #0]

    // LED3 (PB7)
    GPIOB->MODER |= (1U<<14);   // Set bit for output mode
 80003bc:	4b0a      	ldr	r3, [pc, #40]	@ (80003e8 <led_init+0x58>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a09      	ldr	r2, [pc, #36]	@ (80003e8 <led_init+0x58>)
 80003c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003c6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(1U<<15);  // Clear upper bit
 80003c8:	4b07      	ldr	r3, [pc, #28]	@ (80003e8 <led_init+0x58>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a06      	ldr	r2, [pc, #24]	@ (80003e8 <led_init+0x58>)
 80003ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80003d2:	6013      	str	r3, [r2, #0]
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	58024400 	.word	0x58024400
 80003e4:	58020c00 	.word	0x58020c00
 80003e8:	58020400 	.word	0x58020400

080003ec <led_toggle>:

void led_toggle(int led_num)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
    switch(led_num) {
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2b03      	cmp	r3, #3
 80003f8:	d017      	beq.n	800042a <led_toggle+0x3e>
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2b03      	cmp	r3, #3
 80003fe:	dc1b      	bgt.n	8000438 <led_toggle+0x4c>
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2b01      	cmp	r3, #1
 8000404:	d003      	beq.n	800040e <led_toggle+0x22>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2b02      	cmp	r3, #2
 800040a:	d007      	beq.n	800041c <led_toggle+0x30>
        case 1: GPIOD->ODR ^= LED1_PIN; break;  // Green
        case 2: GPIOD->ODR ^= LED2_PIN; break;  // Yellow
        case 3: GPIOB->ODR ^= LED3_PIN; break;  // Red
    }
}
 800040c:	e014      	b.n	8000438 <led_toggle+0x4c>
        case 1: GPIOD->ODR ^= LED1_PIN; break;  // Green
 800040e:	4b0d      	ldr	r3, [pc, #52]	@ (8000444 <led_toggle+0x58>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	4a0c      	ldr	r2, [pc, #48]	@ (8000444 <led_toggle+0x58>)
 8000414:	f483 6380 	eor.w	r3, r3, #1024	@ 0x400
 8000418:	6153      	str	r3, [r2, #20]
 800041a:	e00d      	b.n	8000438 <led_toggle+0x4c>
        case 2: GPIOD->ODR ^= LED2_PIN; break;  // Yellow
 800041c:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <led_toggle+0x58>)
 800041e:	695b      	ldr	r3, [r3, #20]
 8000420:	4a08      	ldr	r2, [pc, #32]	@ (8000444 <led_toggle+0x58>)
 8000422:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000426:	6153      	str	r3, [r2, #20]
 8000428:	e006      	b.n	8000438 <led_toggle+0x4c>
        case 3: GPIOB->ODR ^= LED3_PIN; break;  // Red
 800042a:	4b07      	ldr	r3, [pc, #28]	@ (8000448 <led_toggle+0x5c>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a06      	ldr	r2, [pc, #24]	@ (8000448 <led_toggle+0x5c>)
 8000430:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8000434:	6153      	str	r3, [r2, #20]
 8000436:	bf00      	nop
}
 8000438:	bf00      	nop
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	58020c00 	.word	0x58020c00
 8000448:	58020400 	.word	0x58020400

0800044c <compute_uart_bd>:
/* UART DRIVER */

#define USART3EN               (1U<<18)

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U)) / BaudRate);
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	085a      	lsrs	r2, r3, #1
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	441a      	add	r2, r3
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	fbb2 f3f3 	udiv	r3, r2, r3
 8000464:	b29b      	uxth	r3, r3
}
 8000466:	4618      	mov	r0, r3
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr

08000472 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	b084      	sub	sp, #16
 8000476:	af00      	add	r7, sp, #0
 8000478:	60f8      	str	r0, [r7, #12]
 800047a:	60b9      	str	r1, [r7, #8]
 800047c:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 800047e:	6879      	ldr	r1, [r7, #4]
 8000480:	68b8      	ldr	r0, [r7, #8]
 8000482:	f7ff ffe3 	bl	800044c <compute_uart_bd>
 8000486:	4603      	mov	r3, r0
 8000488:	461a      	mov	r2, r3
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	60da      	str	r2, [r3, #12]
}
 800048e:	bf00      	nop
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
	...

08000498 <usart_rxtx_init>:

void usart_rxtx_init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	/* configure GPIO pin */
	// enable clock access
	RCC->AHB4ENR |= GPIODEN;
 800049c:	4b2c      	ldr	r3, [pc, #176]	@ (8000550 <usart_rxtx_init+0xb8>)
 800049e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80004a2:	4a2b      	ldr	r2, [pc, #172]	@ (8000550 <usart_rxtx_init+0xb8>)
 80004a4:	f043 0308 	orr.w	r3, r3, #8
 80004a8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140

    // LED indication: Starting UART init
    led_toggle(1); // Green LED on
 80004ac:	2001      	movs	r0, #1
 80004ae:	f7ff ff9d 	bl	80003ec <led_toggle>
//	GPIOD->AFR[1] |= (1U<<2);
//	GPIOD->AFR[1] &=~ (1U<<3);

    /* TX Enable for USART3 GPIO */
    // set PD8 to alternate function
	GPIOD->MODER &=~ (1U<<16); //set bit 16 to 0
 80004b2:	4b28      	ldr	r3, [pc, #160]	@ (8000554 <usart_rxtx_init+0xbc>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a27      	ldr	r2, [pc, #156]	@ (8000554 <usart_rxtx_init+0xbc>)
 80004b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80004bc:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U<<17); //set bit 17 to 1
 80004be:	4b25      	ldr	r3, [pc, #148]	@ (8000554 <usart_rxtx_init+0xbc>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a24      	ldr	r2, [pc, #144]	@ (8000554 <usart_rxtx_init+0xbc>)
 80004c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004c8:	6013      	str	r3, [r2, #0]

	// set PD8 to alternate function type UART_TX AF7 (0111)
	GPIOD->AFR[1] &= ~(0xF<<0);  // Clear bits first
 80004ca:	4b22      	ldr	r3, [pc, #136]	@ (8000554 <usart_rxtx_init+0xbc>)
 80004cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004ce:	4a21      	ldr	r2, [pc, #132]	@ (8000554 <usart_rxtx_init+0xbc>)
 80004d0:	f023 030f 	bic.w	r3, r3, #15
 80004d4:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (7U<<0);    // Set AF7
 80004d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000554 <usart_rxtx_init+0xbc>)
 80004d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004da:	4a1e      	ldr	r2, [pc, #120]	@ (8000554 <usart_rxtx_init+0xbc>)
 80004dc:	f043 0307 	orr.w	r3, r3, #7
 80004e0:	6253      	str	r3, [r2, #36]	@ 0x24

	/* RX Enable for USART3 GPIO */
    // set PD9 to alternate function
	GPIOD->MODER &=~ (1U<<18); //set bit 18 to 0
 80004e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000554 <usart_rxtx_init+0xbc>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a1b      	ldr	r2, [pc, #108]	@ (8000554 <usart_rxtx_init+0xbc>)
 80004e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80004ec:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U<<19); //set bit 19 to 1
 80004ee:	4b19      	ldr	r3, [pc, #100]	@ (8000554 <usart_rxtx_init+0xbc>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a18      	ldr	r2, [pc, #96]	@ (8000554 <usart_rxtx_init+0xbc>)
 80004f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004f8:	6013      	str	r3, [r2, #0]

	// set PD9 to alternate function type UART_RX AF7 (0111)
	GPIOD->AFR[1] &= ~(0xF<<4);  // Clear bits first
 80004fa:	4b16      	ldr	r3, [pc, #88]	@ (8000554 <usart_rxtx_init+0xbc>)
 80004fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004fe:	4a15      	ldr	r2, [pc, #84]	@ (8000554 <usart_rxtx_init+0xbc>)
 8000500:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000504:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOD->AFR[1] |= (7U<<4);    // Set AF7
 8000506:	4b13      	ldr	r3, [pc, #76]	@ (8000554 <usart_rxtx_init+0xbc>)
 8000508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800050a:	4a12      	ldr	r2, [pc, #72]	@ (8000554 <usart_rxtx_init+0xbc>)
 800050c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000510:	6253      	str	r3, [r2, #36]	@ 0x24

	/* configure UART module */
	// enable clock access to UART3
	RCC->APB1ENR1 |= USART3EN;
 8000512:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <usart_rxtx_init+0xb8>)
 8000514:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000518:	4a0d      	ldr	r2, [pc, #52]	@ (8000550 <usart_rxtx_init+0xb8>)
 800051a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800051e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148

	// LED indication: UART clocks enabled
	led_toggle(2); // Yellow LED on
 8000522:	2002      	movs	r0, #2
 8000524:	f7ff ff62 	bl	80003ec <led_toggle>

	// configure baudrate
	uart_set_baudrate(USART3, ABP1_CLK, UART_BAUDRATE);
 8000528:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800052c:	490a      	ldr	r1, [pc, #40]	@ (8000558 <usart_rxtx_init+0xc0>)
 800052e:	480b      	ldr	r0, [pc, #44]	@ (800055c <usart_rxtx_init+0xc4>)
 8000530:	f7ff ff9f 	bl	8000472 <uart_set_baudrate>

	// configure transfer direction
	USART3->CR1 = CR1_FIFOEN_DISABLE | CR1_TE | CR1_RE;
 8000534:	4b09      	ldr	r3, [pc, #36]	@ (800055c <usart_rxtx_init+0xc4>)
 8000536:	220c      	movs	r2, #12
 8000538:	601a      	str	r2, [r3, #0]
	// enable uart module
	USART3->CR1 |= CR1_UE;
 800053a:	4b08      	ldr	r3, [pc, #32]	@ (800055c <usart_rxtx_init+0xc4>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a07      	ldr	r2, [pc, #28]	@ (800055c <usart_rxtx_init+0xc4>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6013      	str	r3, [r2, #0]

	// LED indication: UART fully configured
	led_toggle(3); // Red LED on
 8000546:	2003      	movs	r0, #3
 8000548:	f7ff ff50 	bl	80003ec <led_toggle>
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	58024400 	.word	0x58024400
 8000554:	58020c00 	.word	0x58020c00
 8000558:	00f42400 	.word	0x00f42400
 800055c:	40004800 	.word	0x40004800

08000560 <uart3_write>:
	// read data
	return USART3->RDR;
}

void uart3_write(int ch)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	// LED indication: Attempting to send character
	led_toggle(1); // Toggle green LED for each character
 8000568:	2001      	movs	r0, #1
 800056a:	f7ff ff3f 	bl	80003ec <led_toggle>

	// make sure tx data reg is empty
	while(!(USART3->ISR & ISR_ALT_TXE)) {}
 800056e:	bf00      	nop
 8000570:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <uart3_write+0x4c>)
 8000572:	69db      	ldr	r3, [r3, #28]
 8000574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000578:	2b00      	cmp	r3, #0
 800057a:	d0f9      	beq.n	8000570 <uart3_write+0x10>
	// write to transmit data reg
	USART3->TDR = (ch & 0xFF);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4a0b      	ldr	r2, [pc, #44]	@ (80005ac <uart3_write+0x4c>)
 8000580:	b2db      	uxtb	r3, r3
 8000582:	6293      	str	r3, [r2, #40]	@ 0x28

	// LED indication: Character sent
	led_toggle(2); // Toggle yellow LED after sending
 8000584:	2002      	movs	r0, #2
 8000586:	f7ff ff31 	bl	80003ec <led_toggle>

	// Delay between characters
	for(volatile int i = 0; i < 10000; i++) {}
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	e002      	b.n	8000596 <uart3_write+0x36>
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	3301      	adds	r3, #1
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	f242 720f 	movw	r2, #9999	@ 0x270f
 800059c:	4293      	cmp	r3, r2
 800059e:	ddf7      	ble.n	8000590 <uart3_write+0x30>
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40004800 	.word	0x40004800

080005b0 <__io_putchar>:

int __io_putchar(int ch)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	uart3_write(ch);
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff ffd1 	bl	8000560 <uart3_write>
	return ch;
 80005be:	687b      	ldr	r3, [r7, #4]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <uart_driver>:

void uart_driver(int ch)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
    led_init();
 80005d0:	f7ff fede 	bl	8000390 <led_init>
    usart_rxtx_init();
 80005d4:	f7ff ff60 	bl	8000498 <usart_rxtx_init>

    while(1)
    {
    	printf("Hello STM32H7....\n\r");
 80005d8:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <uart_driver+0x20>)
 80005da:	f000 f99f 	bl	800091c <iprintf>
        led_toggle(3);
 80005de:	2003      	movs	r0, #3
 80005e0:	f7ff ff04 	bl	80003ec <led_toggle>
    	printf("Hello STM32H7....\n\r");
 80005e4:	bf00      	nop
 80005e6:	e7f7      	b.n	80005d8 <uart_driver+0x10>
 80005e8:	08001608 	.word	0x08001608

080005ec <main>:

#include <stdint.h>
#include <stdbool.h>

int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0

	//run_gpio_led(true);
	uart_driver('Y');
 80005f0:	2059      	movs	r0, #89	@ 0x59
 80005f2:	f7ff ffe9 	bl	80005c8 <uart_driver>
	return 1;
 80005f6:	2301      	movs	r3, #1
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	bd80      	pop	{r7, pc}

080005fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	e00a      	b.n	8000624 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800060e:	f3af 8000 	nop.w
 8000612:	4601      	mov	r1, r0
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	60ba      	str	r2, [r7, #8]
 800061a:	b2ca      	uxtb	r2, r1
 800061c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	3301      	adds	r3, #1
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	697a      	ldr	r2, [r7, #20]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	429a      	cmp	r2, r3
 800062a:	dbf0      	blt.n	800060e <_read+0x12>
  }

  return len;
 800062c:	687b      	ldr	r3, [r7, #4]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3718      	adds	r7, #24
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b086      	sub	sp, #24
 800063a:	af00      	add	r7, sp, #0
 800063c:	60f8      	str	r0, [r7, #12]
 800063e:	60b9      	str	r1, [r7, #8]
 8000640:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	e009      	b.n	800065c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	1c5a      	adds	r2, r3, #1
 800064c:	60ba      	str	r2, [r7, #8]
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ffad 	bl	80005b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	3301      	adds	r3, #1
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	697a      	ldr	r2, [r7, #20]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	429a      	cmp	r2, r3
 8000662:	dbf1      	blt.n	8000648 <_write+0x12>
  }
  return len;
 8000664:	687b      	ldr	r3, [r7, #4]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3718      	adds	r7, #24
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <_close>:

int _close(int file)
{
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000676:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800067a:	4618      	mov	r0, r3
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000686:	b480      	push	{r7}
 8000688:	b083      	sub	sp, #12
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
 800068e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000696:	605a      	str	r2, [r3, #4]
  return 0;
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <_isatty>:

int _isatty(int file)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b083      	sub	sp, #12
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006ae:	2301      	movs	r3, #1
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006c8:	2300      	movs	r3, #0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
	...

080006d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e0:	4a14      	ldr	r2, [pc, #80]	@ (8000734 <_sbrk+0x5c>)
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <_sbrk+0x60>)
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006ec:	4b13      	ldr	r3, [pc, #76]	@ (800073c <_sbrk+0x64>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d102      	bne.n	80006fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <_sbrk+0x64>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <_sbrk+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <_sbrk+0x64>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	429a      	cmp	r2, r3
 8000706:	d207      	bcs.n	8000718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000708:	f000 f922 	bl	8000950 <__errno>
 800070c:	4603      	mov	r3, r0
 800070e:	220c      	movs	r2, #12
 8000710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000712:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000716:	e009      	b.n	800072c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000718:	4b08      	ldr	r3, [pc, #32]	@ (800073c <_sbrk+0x64>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800071e:	4b07      	ldr	r3, [pc, #28]	@ (800073c <_sbrk+0x64>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	4a05      	ldr	r2, [pc, #20]	@ (800073c <_sbrk+0x64>)
 8000728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800072a:	68fb      	ldr	r3, [r7, #12]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20010000 	.word	0x20010000
 8000738:	00000400 	.word	0x00000400
 800073c:	24000078 	.word	0x24000078
 8000740:	20000000 	.word	0x20000000

08000744 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000744:	480d      	ldr	r0, [pc, #52]	@ (800077c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000746:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000748:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800074c:	480c      	ldr	r0, [pc, #48]	@ (8000780 <LoopForever+0x6>)
  ldr r1, =_edata
 800074e:	490d      	ldr	r1, [pc, #52]	@ (8000784 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000750:	4a0d      	ldr	r2, [pc, #52]	@ (8000788 <LoopForever+0xe>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000754:	e002      	b.n	800075c <LoopCopyDataInit>

08000756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075a:	3304      	adds	r3, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800075c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000760:	d3f9      	bcc.n	8000756 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000762:	4a0a      	ldr	r2, [pc, #40]	@ (800078c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000764:	4c0a      	ldr	r4, [pc, #40]	@ (8000790 <LoopForever+0x16>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000768:	e001      	b.n	800076e <LoopFillZerobss>

0800076a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800076c:	3204      	adds	r2, #4

0800076e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000770:	d3fb      	bcc.n	800076a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000772:	f000 f8f3 	bl	800095c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000776:	f7ff ff39 	bl	80005ec <main>

0800077a <LoopForever>:

LoopForever:
  b LoopForever
 800077a:	e7fe      	b.n	800077a <LoopForever>
  ldr   r0, =_estack
 800077c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000780:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000784:	2400005c 	.word	0x2400005c
  ldr r2, =_sidata
 8000788:	08001660 	.word	0x08001660
  ldr r2, =_sbss
 800078c:	2400005c 	.word	0x2400005c
  ldr r4, =_ebss
 8000790:	240001c8 	.word	0x240001c8

08000794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000794:	e7fe      	b.n	8000794 <ADC1_2_IRQHandler>
	...

08000798 <std>:
 8000798:	2300      	movs	r3, #0
 800079a:	b510      	push	{r4, lr}
 800079c:	4604      	mov	r4, r0
 800079e:	e9c0 3300 	strd	r3, r3, [r0]
 80007a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007a6:	6083      	str	r3, [r0, #8]
 80007a8:	8181      	strh	r1, [r0, #12]
 80007aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80007ac:	81c2      	strh	r2, [r0, #14]
 80007ae:	6183      	str	r3, [r0, #24]
 80007b0:	4619      	mov	r1, r3
 80007b2:	2208      	movs	r2, #8
 80007b4:	305c      	adds	r0, #92	@ 0x5c
 80007b6:	f000 f8c3 	bl	8000940 <memset>
 80007ba:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <std+0x58>)
 80007bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80007be:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <std+0x5c>)
 80007c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80007c2:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <std+0x60>)
 80007c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80007c6:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <std+0x64>)
 80007c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80007ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <std+0x68>)
 80007cc:	6224      	str	r4, [r4, #32]
 80007ce:	429c      	cmp	r4, r3
 80007d0:	d006      	beq.n	80007e0 <std+0x48>
 80007d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80007d6:	4294      	cmp	r4, r2
 80007d8:	d002      	beq.n	80007e0 <std+0x48>
 80007da:	33d0      	adds	r3, #208	@ 0xd0
 80007dc:	429c      	cmp	r4, r3
 80007de:	d105      	bne.n	80007ec <std+0x54>
 80007e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80007e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007e8:	f000 b8dc 	b.w	80009a4 <__retarget_lock_init_recursive>
 80007ec:	bd10      	pop	{r4, pc}
 80007ee:	bf00      	nop
 80007f0:	080011f9 	.word	0x080011f9
 80007f4:	0800121b 	.word	0x0800121b
 80007f8:	08001253 	.word	0x08001253
 80007fc:	08001277 	.word	0x08001277
 8000800:	2400007c 	.word	0x2400007c

08000804 <stdio_exit_handler>:
 8000804:	4a02      	ldr	r2, [pc, #8]	@ (8000810 <stdio_exit_handler+0xc>)
 8000806:	4903      	ldr	r1, [pc, #12]	@ (8000814 <stdio_exit_handler+0x10>)
 8000808:	4803      	ldr	r0, [pc, #12]	@ (8000818 <stdio_exit_handler+0x14>)
 800080a:	f000 b869 	b.w	80008e0 <_fwalk_sglue>
 800080e:	bf00      	nop
 8000810:	24000000 	.word	0x24000000
 8000814:	08001191 	.word	0x08001191
 8000818:	24000010 	.word	0x24000010

0800081c <cleanup_stdio>:
 800081c:	6841      	ldr	r1, [r0, #4]
 800081e:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <cleanup_stdio+0x34>)
 8000820:	4299      	cmp	r1, r3
 8000822:	b510      	push	{r4, lr}
 8000824:	4604      	mov	r4, r0
 8000826:	d001      	beq.n	800082c <cleanup_stdio+0x10>
 8000828:	f000 fcb2 	bl	8001190 <_fflush_r>
 800082c:	68a1      	ldr	r1, [r4, #8]
 800082e:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <cleanup_stdio+0x38>)
 8000830:	4299      	cmp	r1, r3
 8000832:	d002      	beq.n	800083a <cleanup_stdio+0x1e>
 8000834:	4620      	mov	r0, r4
 8000836:	f000 fcab 	bl	8001190 <_fflush_r>
 800083a:	68e1      	ldr	r1, [r4, #12]
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <cleanup_stdio+0x3c>)
 800083e:	4299      	cmp	r1, r3
 8000840:	d004      	beq.n	800084c <cleanup_stdio+0x30>
 8000842:	4620      	mov	r0, r4
 8000844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000848:	f000 bca2 	b.w	8001190 <_fflush_r>
 800084c:	bd10      	pop	{r4, pc}
 800084e:	bf00      	nop
 8000850:	2400007c 	.word	0x2400007c
 8000854:	240000e4 	.word	0x240000e4
 8000858:	2400014c 	.word	0x2400014c

0800085c <global_stdio_init.part.0>:
 800085c:	b510      	push	{r4, lr}
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <global_stdio_init.part.0+0x30>)
 8000860:	4c0b      	ldr	r4, [pc, #44]	@ (8000890 <global_stdio_init.part.0+0x34>)
 8000862:	4a0c      	ldr	r2, [pc, #48]	@ (8000894 <global_stdio_init.part.0+0x38>)
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	4620      	mov	r0, r4
 8000868:	2200      	movs	r2, #0
 800086a:	2104      	movs	r1, #4
 800086c:	f7ff ff94 	bl	8000798 <std>
 8000870:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000874:	2201      	movs	r2, #1
 8000876:	2109      	movs	r1, #9
 8000878:	f7ff ff8e 	bl	8000798 <std>
 800087c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000880:	2202      	movs	r2, #2
 8000882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000886:	2112      	movs	r1, #18
 8000888:	f7ff bf86 	b.w	8000798 <std>
 800088c:	240001b4 	.word	0x240001b4
 8000890:	2400007c 	.word	0x2400007c
 8000894:	08000805 	.word	0x08000805

08000898 <__sfp_lock_acquire>:
 8000898:	4801      	ldr	r0, [pc, #4]	@ (80008a0 <__sfp_lock_acquire+0x8>)
 800089a:	f000 b884 	b.w	80009a6 <__retarget_lock_acquire_recursive>
 800089e:	bf00      	nop
 80008a0:	240001b9 	.word	0x240001b9

080008a4 <__sfp_lock_release>:
 80008a4:	4801      	ldr	r0, [pc, #4]	@ (80008ac <__sfp_lock_release+0x8>)
 80008a6:	f000 b87f 	b.w	80009a8 <__retarget_lock_release_recursive>
 80008aa:	bf00      	nop
 80008ac:	240001b9 	.word	0x240001b9

080008b0 <__sinit>:
 80008b0:	b510      	push	{r4, lr}
 80008b2:	4604      	mov	r4, r0
 80008b4:	f7ff fff0 	bl	8000898 <__sfp_lock_acquire>
 80008b8:	6a23      	ldr	r3, [r4, #32]
 80008ba:	b11b      	cbz	r3, 80008c4 <__sinit+0x14>
 80008bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008c0:	f7ff bff0 	b.w	80008a4 <__sfp_lock_release>
 80008c4:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <__sinit+0x28>)
 80008c6:	6223      	str	r3, [r4, #32]
 80008c8:	4b04      	ldr	r3, [pc, #16]	@ (80008dc <__sinit+0x2c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1f5      	bne.n	80008bc <__sinit+0xc>
 80008d0:	f7ff ffc4 	bl	800085c <global_stdio_init.part.0>
 80008d4:	e7f2      	b.n	80008bc <__sinit+0xc>
 80008d6:	bf00      	nop
 80008d8:	0800081d 	.word	0x0800081d
 80008dc:	240001b4 	.word	0x240001b4

080008e0 <_fwalk_sglue>:
 80008e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008e4:	4607      	mov	r7, r0
 80008e6:	4688      	mov	r8, r1
 80008e8:	4614      	mov	r4, r2
 80008ea:	2600      	movs	r6, #0
 80008ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008f0:	f1b9 0901 	subs.w	r9, r9, #1
 80008f4:	d505      	bpl.n	8000902 <_fwalk_sglue+0x22>
 80008f6:	6824      	ldr	r4, [r4, #0]
 80008f8:	2c00      	cmp	r4, #0
 80008fa:	d1f7      	bne.n	80008ec <_fwalk_sglue+0xc>
 80008fc:	4630      	mov	r0, r6
 80008fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000902:	89ab      	ldrh	r3, [r5, #12]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d907      	bls.n	8000918 <_fwalk_sglue+0x38>
 8000908:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800090c:	3301      	adds	r3, #1
 800090e:	d003      	beq.n	8000918 <_fwalk_sglue+0x38>
 8000910:	4629      	mov	r1, r5
 8000912:	4638      	mov	r0, r7
 8000914:	47c0      	blx	r8
 8000916:	4306      	orrs	r6, r0
 8000918:	3568      	adds	r5, #104	@ 0x68
 800091a:	e7e9      	b.n	80008f0 <_fwalk_sglue+0x10>

0800091c <iprintf>:
 800091c:	b40f      	push	{r0, r1, r2, r3}
 800091e:	b507      	push	{r0, r1, r2, lr}
 8000920:	4906      	ldr	r1, [pc, #24]	@ (800093c <iprintf+0x20>)
 8000922:	ab04      	add	r3, sp, #16
 8000924:	6808      	ldr	r0, [r1, #0]
 8000926:	f853 2b04 	ldr.w	r2, [r3], #4
 800092a:	6881      	ldr	r1, [r0, #8]
 800092c:	9301      	str	r3, [sp, #4]
 800092e:	f000 f865 	bl	80009fc <_vfiprintf_r>
 8000932:	b003      	add	sp, #12
 8000934:	f85d eb04 	ldr.w	lr, [sp], #4
 8000938:	b004      	add	sp, #16
 800093a:	4770      	bx	lr
 800093c:	2400000c 	.word	0x2400000c

08000940 <memset>:
 8000940:	4402      	add	r2, r0
 8000942:	4603      	mov	r3, r0
 8000944:	4293      	cmp	r3, r2
 8000946:	d100      	bne.n	800094a <memset+0xa>
 8000948:	4770      	bx	lr
 800094a:	f803 1b01 	strb.w	r1, [r3], #1
 800094e:	e7f9      	b.n	8000944 <memset+0x4>

08000950 <__errno>:
 8000950:	4b01      	ldr	r3, [pc, #4]	@ (8000958 <__errno+0x8>)
 8000952:	6818      	ldr	r0, [r3, #0]
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	2400000c 	.word	0x2400000c

0800095c <__libc_init_array>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	4d0d      	ldr	r5, [pc, #52]	@ (8000994 <__libc_init_array+0x38>)
 8000960:	4c0d      	ldr	r4, [pc, #52]	@ (8000998 <__libc_init_array+0x3c>)
 8000962:	1b64      	subs	r4, r4, r5
 8000964:	10a4      	asrs	r4, r4, #2
 8000966:	2600      	movs	r6, #0
 8000968:	42a6      	cmp	r6, r4
 800096a:	d109      	bne.n	8000980 <__libc_init_array+0x24>
 800096c:	4d0b      	ldr	r5, [pc, #44]	@ (800099c <__libc_init_array+0x40>)
 800096e:	4c0c      	ldr	r4, [pc, #48]	@ (80009a0 <__libc_init_array+0x44>)
 8000970:	f000 fe3e 	bl	80015f0 <_init>
 8000974:	1b64      	subs	r4, r4, r5
 8000976:	10a4      	asrs	r4, r4, #2
 8000978:	2600      	movs	r6, #0
 800097a:	42a6      	cmp	r6, r4
 800097c:	d105      	bne.n	800098a <__libc_init_array+0x2e>
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f855 3b04 	ldr.w	r3, [r5], #4
 8000984:	4798      	blx	r3
 8000986:	3601      	adds	r6, #1
 8000988:	e7ee      	b.n	8000968 <__libc_init_array+0xc>
 800098a:	f855 3b04 	ldr.w	r3, [r5], #4
 800098e:	4798      	blx	r3
 8000990:	3601      	adds	r6, #1
 8000992:	e7f2      	b.n	800097a <__libc_init_array+0x1e>
 8000994:	08001658 	.word	0x08001658
 8000998:	08001658 	.word	0x08001658
 800099c:	08001658 	.word	0x08001658
 80009a0:	0800165c 	.word	0x0800165c

080009a4 <__retarget_lock_init_recursive>:
 80009a4:	4770      	bx	lr

080009a6 <__retarget_lock_acquire_recursive>:
 80009a6:	4770      	bx	lr

080009a8 <__retarget_lock_release_recursive>:
 80009a8:	4770      	bx	lr

080009aa <__sfputc_r>:
 80009aa:	6893      	ldr	r3, [r2, #8]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	b410      	push	{r4}
 80009b2:	6093      	str	r3, [r2, #8]
 80009b4:	da08      	bge.n	80009c8 <__sfputc_r+0x1e>
 80009b6:	6994      	ldr	r4, [r2, #24]
 80009b8:	42a3      	cmp	r3, r4
 80009ba:	db01      	blt.n	80009c0 <__sfputc_r+0x16>
 80009bc:	290a      	cmp	r1, #10
 80009be:	d103      	bne.n	80009c8 <__sfputc_r+0x1e>
 80009c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009c4:	f000 bc5b 	b.w	800127e <__swbuf_r>
 80009c8:	6813      	ldr	r3, [r2, #0]
 80009ca:	1c58      	adds	r0, r3, #1
 80009cc:	6010      	str	r0, [r2, #0]
 80009ce:	7019      	strb	r1, [r3, #0]
 80009d0:	4608      	mov	r0, r1
 80009d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <__sfputs_r>:
 80009d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009da:	4606      	mov	r6, r0
 80009dc:	460f      	mov	r7, r1
 80009de:	4614      	mov	r4, r2
 80009e0:	18d5      	adds	r5, r2, r3
 80009e2:	42ac      	cmp	r4, r5
 80009e4:	d101      	bne.n	80009ea <__sfputs_r+0x12>
 80009e6:	2000      	movs	r0, #0
 80009e8:	e007      	b.n	80009fa <__sfputs_r+0x22>
 80009ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009ee:	463a      	mov	r2, r7
 80009f0:	4630      	mov	r0, r6
 80009f2:	f7ff ffda 	bl	80009aa <__sfputc_r>
 80009f6:	1c43      	adds	r3, r0, #1
 80009f8:	d1f3      	bne.n	80009e2 <__sfputs_r+0xa>
 80009fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080009fc <_vfiprintf_r>:
 80009fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a00:	460d      	mov	r5, r1
 8000a02:	b09d      	sub	sp, #116	@ 0x74
 8000a04:	4614      	mov	r4, r2
 8000a06:	4698      	mov	r8, r3
 8000a08:	4606      	mov	r6, r0
 8000a0a:	b118      	cbz	r0, 8000a14 <_vfiprintf_r+0x18>
 8000a0c:	6a03      	ldr	r3, [r0, #32]
 8000a0e:	b90b      	cbnz	r3, 8000a14 <_vfiprintf_r+0x18>
 8000a10:	f7ff ff4e 	bl	80008b0 <__sinit>
 8000a14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000a16:	07d9      	lsls	r1, r3, #31
 8000a18:	d405      	bmi.n	8000a26 <_vfiprintf_r+0x2a>
 8000a1a:	89ab      	ldrh	r3, [r5, #12]
 8000a1c:	059a      	lsls	r2, r3, #22
 8000a1e:	d402      	bmi.n	8000a26 <_vfiprintf_r+0x2a>
 8000a20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000a22:	f7ff ffc0 	bl	80009a6 <__retarget_lock_acquire_recursive>
 8000a26:	89ab      	ldrh	r3, [r5, #12]
 8000a28:	071b      	lsls	r3, r3, #28
 8000a2a:	d501      	bpl.n	8000a30 <_vfiprintf_r+0x34>
 8000a2c:	692b      	ldr	r3, [r5, #16]
 8000a2e:	b99b      	cbnz	r3, 8000a58 <_vfiprintf_r+0x5c>
 8000a30:	4629      	mov	r1, r5
 8000a32:	4630      	mov	r0, r6
 8000a34:	f000 fc62 	bl	80012fc <__swsetup_r>
 8000a38:	b170      	cbz	r0, 8000a58 <_vfiprintf_r+0x5c>
 8000a3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000a3c:	07dc      	lsls	r4, r3, #31
 8000a3e:	d504      	bpl.n	8000a4a <_vfiprintf_r+0x4e>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a44:	b01d      	add	sp, #116	@ 0x74
 8000a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a4a:	89ab      	ldrh	r3, [r5, #12]
 8000a4c:	0598      	lsls	r0, r3, #22
 8000a4e:	d4f7      	bmi.n	8000a40 <_vfiprintf_r+0x44>
 8000a50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000a52:	f7ff ffa9 	bl	80009a8 <__retarget_lock_release_recursive>
 8000a56:	e7f3      	b.n	8000a40 <_vfiprintf_r+0x44>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000a62:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a66:	2330      	movs	r3, #48	@ 0x30
 8000a68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000c18 <_vfiprintf_r+0x21c>
 8000a6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000a70:	f04f 0901 	mov.w	r9, #1
 8000a74:	4623      	mov	r3, r4
 8000a76:	469a      	mov	sl, r3
 8000a78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a7c:	b10a      	cbz	r2, 8000a82 <_vfiprintf_r+0x86>
 8000a7e:	2a25      	cmp	r2, #37	@ 0x25
 8000a80:	d1f9      	bne.n	8000a76 <_vfiprintf_r+0x7a>
 8000a82:	ebba 0b04 	subs.w	fp, sl, r4
 8000a86:	d00b      	beq.n	8000aa0 <_vfiprintf_r+0xa4>
 8000a88:	465b      	mov	r3, fp
 8000a8a:	4622      	mov	r2, r4
 8000a8c:	4629      	mov	r1, r5
 8000a8e:	4630      	mov	r0, r6
 8000a90:	f7ff ffa2 	bl	80009d8 <__sfputs_r>
 8000a94:	3001      	adds	r0, #1
 8000a96:	f000 80a7 	beq.w	8000be8 <_vfiprintf_r+0x1ec>
 8000a9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000a9c:	445a      	add	r2, fp
 8000a9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8000aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f000 809f 	beq.w	8000be8 <_vfiprintf_r+0x1ec>
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ab0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ab4:	f10a 0a01 	add.w	sl, sl, #1
 8000ab8:	9304      	str	r3, [sp, #16]
 8000aba:	9307      	str	r3, [sp, #28]
 8000abc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000ac0:	931a      	str	r3, [sp, #104]	@ 0x68
 8000ac2:	4654      	mov	r4, sl
 8000ac4:	2205      	movs	r2, #5
 8000ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000aca:	4853      	ldr	r0, [pc, #332]	@ (8000c18 <_vfiprintf_r+0x21c>)
 8000acc:	f7ff fc10 	bl	80002f0 <memchr>
 8000ad0:	9a04      	ldr	r2, [sp, #16]
 8000ad2:	b9d8      	cbnz	r0, 8000b0c <_vfiprintf_r+0x110>
 8000ad4:	06d1      	lsls	r1, r2, #27
 8000ad6:	bf44      	itt	mi
 8000ad8:	2320      	movmi	r3, #32
 8000ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ade:	0713      	lsls	r3, r2, #28
 8000ae0:	bf44      	itt	mi
 8000ae2:	232b      	movmi	r3, #43	@ 0x2b
 8000ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8000aec:	2b2a      	cmp	r3, #42	@ 0x2a
 8000aee:	d015      	beq.n	8000b1c <_vfiprintf_r+0x120>
 8000af0:	9a07      	ldr	r2, [sp, #28]
 8000af2:	4654      	mov	r4, sl
 8000af4:	2000      	movs	r0, #0
 8000af6:	f04f 0c0a 	mov.w	ip, #10
 8000afa:	4621      	mov	r1, r4
 8000afc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b00:	3b30      	subs	r3, #48	@ 0x30
 8000b02:	2b09      	cmp	r3, #9
 8000b04:	d94b      	bls.n	8000b9e <_vfiprintf_r+0x1a2>
 8000b06:	b1b0      	cbz	r0, 8000b36 <_vfiprintf_r+0x13a>
 8000b08:	9207      	str	r2, [sp, #28]
 8000b0a:	e014      	b.n	8000b36 <_vfiprintf_r+0x13a>
 8000b0c:	eba0 0308 	sub.w	r3, r0, r8
 8000b10:	fa09 f303 	lsl.w	r3, r9, r3
 8000b14:	4313      	orrs	r3, r2
 8000b16:	9304      	str	r3, [sp, #16]
 8000b18:	46a2      	mov	sl, r4
 8000b1a:	e7d2      	b.n	8000ac2 <_vfiprintf_r+0xc6>
 8000b1c:	9b03      	ldr	r3, [sp, #12]
 8000b1e:	1d19      	adds	r1, r3, #4
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	9103      	str	r1, [sp, #12]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bfbb      	ittet	lt
 8000b28:	425b      	neglt	r3, r3
 8000b2a:	f042 0202 	orrlt.w	r2, r2, #2
 8000b2e:	9307      	strge	r3, [sp, #28]
 8000b30:	9307      	strlt	r3, [sp, #28]
 8000b32:	bfb8      	it	lt
 8000b34:	9204      	strlt	r2, [sp, #16]
 8000b36:	7823      	ldrb	r3, [r4, #0]
 8000b38:	2b2e      	cmp	r3, #46	@ 0x2e
 8000b3a:	d10a      	bne.n	8000b52 <_vfiprintf_r+0x156>
 8000b3c:	7863      	ldrb	r3, [r4, #1]
 8000b3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b40:	d132      	bne.n	8000ba8 <_vfiprintf_r+0x1ac>
 8000b42:	9b03      	ldr	r3, [sp, #12]
 8000b44:	1d1a      	adds	r2, r3, #4
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	9203      	str	r2, [sp, #12]
 8000b4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000b4e:	3402      	adds	r4, #2
 8000b50:	9305      	str	r3, [sp, #20]
 8000b52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000c28 <_vfiprintf_r+0x22c>
 8000b56:	7821      	ldrb	r1, [r4, #0]
 8000b58:	2203      	movs	r2, #3
 8000b5a:	4650      	mov	r0, sl
 8000b5c:	f7ff fbc8 	bl	80002f0 <memchr>
 8000b60:	b138      	cbz	r0, 8000b72 <_vfiprintf_r+0x176>
 8000b62:	9b04      	ldr	r3, [sp, #16]
 8000b64:	eba0 000a 	sub.w	r0, r0, sl
 8000b68:	2240      	movs	r2, #64	@ 0x40
 8000b6a:	4082      	lsls	r2, r0
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	3401      	adds	r4, #1
 8000b70:	9304      	str	r3, [sp, #16]
 8000b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b76:	4829      	ldr	r0, [pc, #164]	@ (8000c1c <_vfiprintf_r+0x220>)
 8000b78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000b7c:	2206      	movs	r2, #6
 8000b7e:	f7ff fbb7 	bl	80002f0 <memchr>
 8000b82:	2800      	cmp	r0, #0
 8000b84:	d03f      	beq.n	8000c06 <_vfiprintf_r+0x20a>
 8000b86:	4b26      	ldr	r3, [pc, #152]	@ (8000c20 <_vfiprintf_r+0x224>)
 8000b88:	bb1b      	cbnz	r3, 8000bd2 <_vfiprintf_r+0x1d6>
 8000b8a:	9b03      	ldr	r3, [sp, #12]
 8000b8c:	3307      	adds	r3, #7
 8000b8e:	f023 0307 	bic.w	r3, r3, #7
 8000b92:	3308      	adds	r3, #8
 8000b94:	9303      	str	r3, [sp, #12]
 8000b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000b98:	443b      	add	r3, r7
 8000b9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b9c:	e76a      	b.n	8000a74 <_vfiprintf_r+0x78>
 8000b9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ba2:	460c      	mov	r4, r1
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	e7a8      	b.n	8000afa <_vfiprintf_r+0xfe>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	3401      	adds	r4, #1
 8000bac:	9305      	str	r3, [sp, #20]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f04f 0c0a 	mov.w	ip, #10
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000bba:	3a30      	subs	r2, #48	@ 0x30
 8000bbc:	2a09      	cmp	r2, #9
 8000bbe:	d903      	bls.n	8000bc8 <_vfiprintf_r+0x1cc>
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d0c6      	beq.n	8000b52 <_vfiprintf_r+0x156>
 8000bc4:	9105      	str	r1, [sp, #20]
 8000bc6:	e7c4      	b.n	8000b52 <_vfiprintf_r+0x156>
 8000bc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8000bcc:	4604      	mov	r4, r0
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e7f0      	b.n	8000bb4 <_vfiprintf_r+0x1b8>
 8000bd2:	ab03      	add	r3, sp, #12
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	462a      	mov	r2, r5
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <_vfiprintf_r+0x228>)
 8000bda:	a904      	add	r1, sp, #16
 8000bdc:	4630      	mov	r0, r6
 8000bde:	f3af 8000 	nop.w
 8000be2:	4607      	mov	r7, r0
 8000be4:	1c78      	adds	r0, r7, #1
 8000be6:	d1d6      	bne.n	8000b96 <_vfiprintf_r+0x19a>
 8000be8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000bea:	07d9      	lsls	r1, r3, #31
 8000bec:	d405      	bmi.n	8000bfa <_vfiprintf_r+0x1fe>
 8000bee:	89ab      	ldrh	r3, [r5, #12]
 8000bf0:	059a      	lsls	r2, r3, #22
 8000bf2:	d402      	bmi.n	8000bfa <_vfiprintf_r+0x1fe>
 8000bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000bf6:	f7ff fed7 	bl	80009a8 <__retarget_lock_release_recursive>
 8000bfa:	89ab      	ldrh	r3, [r5, #12]
 8000bfc:	065b      	lsls	r3, r3, #25
 8000bfe:	f53f af1f 	bmi.w	8000a40 <_vfiprintf_r+0x44>
 8000c02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000c04:	e71e      	b.n	8000a44 <_vfiprintf_r+0x48>
 8000c06:	ab03      	add	r3, sp, #12
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	462a      	mov	r2, r5
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <_vfiprintf_r+0x228>)
 8000c0e:	a904      	add	r1, sp, #16
 8000c10:	4630      	mov	r0, r6
 8000c12:	f000 f91b 	bl	8000e4c <_printf_i>
 8000c16:	e7e4      	b.n	8000be2 <_vfiprintf_r+0x1e6>
 8000c18:	0800161c 	.word	0x0800161c
 8000c1c:	08001626 	.word	0x08001626
 8000c20:	00000000 	.word	0x00000000
 8000c24:	080009d9 	.word	0x080009d9
 8000c28:	08001622 	.word	0x08001622

08000c2c <sbrk_aligned>:
 8000c2c:	b570      	push	{r4, r5, r6, lr}
 8000c2e:	4e0f      	ldr	r6, [pc, #60]	@ (8000c6c <sbrk_aligned+0x40>)
 8000c30:	460c      	mov	r4, r1
 8000c32:	6831      	ldr	r1, [r6, #0]
 8000c34:	4605      	mov	r5, r0
 8000c36:	b911      	cbnz	r1, 8000c3e <sbrk_aligned+0x12>
 8000c38:	f000 fc4c 	bl	80014d4 <_sbrk_r>
 8000c3c:	6030      	str	r0, [r6, #0]
 8000c3e:	4621      	mov	r1, r4
 8000c40:	4628      	mov	r0, r5
 8000c42:	f000 fc47 	bl	80014d4 <_sbrk_r>
 8000c46:	1c43      	adds	r3, r0, #1
 8000c48:	d103      	bne.n	8000c52 <sbrk_aligned+0x26>
 8000c4a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000c4e:	4620      	mov	r0, r4
 8000c50:	bd70      	pop	{r4, r5, r6, pc}
 8000c52:	1cc4      	adds	r4, r0, #3
 8000c54:	f024 0403 	bic.w	r4, r4, #3
 8000c58:	42a0      	cmp	r0, r4
 8000c5a:	d0f8      	beq.n	8000c4e <sbrk_aligned+0x22>
 8000c5c:	1a21      	subs	r1, r4, r0
 8000c5e:	4628      	mov	r0, r5
 8000c60:	f000 fc38 	bl	80014d4 <_sbrk_r>
 8000c64:	3001      	adds	r0, #1
 8000c66:	d1f2      	bne.n	8000c4e <sbrk_aligned+0x22>
 8000c68:	e7ef      	b.n	8000c4a <sbrk_aligned+0x1e>
 8000c6a:	bf00      	nop
 8000c6c:	240001bc 	.word	0x240001bc

08000c70 <_malloc_r>:
 8000c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c74:	1ccd      	adds	r5, r1, #3
 8000c76:	f025 0503 	bic.w	r5, r5, #3
 8000c7a:	3508      	adds	r5, #8
 8000c7c:	2d0c      	cmp	r5, #12
 8000c7e:	bf38      	it	cc
 8000c80:	250c      	movcc	r5, #12
 8000c82:	2d00      	cmp	r5, #0
 8000c84:	4606      	mov	r6, r0
 8000c86:	db01      	blt.n	8000c8c <_malloc_r+0x1c>
 8000c88:	42a9      	cmp	r1, r5
 8000c8a:	d904      	bls.n	8000c96 <_malloc_r+0x26>
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	6033      	str	r3, [r6, #0]
 8000c90:	2000      	movs	r0, #0
 8000c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d6c <_malloc_r+0xfc>
 8000c9a:	f000 faa1 	bl	80011e0 <__malloc_lock>
 8000c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8000ca2:	461c      	mov	r4, r3
 8000ca4:	bb44      	cbnz	r4, 8000cf8 <_malloc_r+0x88>
 8000ca6:	4629      	mov	r1, r5
 8000ca8:	4630      	mov	r0, r6
 8000caa:	f7ff ffbf 	bl	8000c2c <sbrk_aligned>
 8000cae:	1c43      	adds	r3, r0, #1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	d158      	bne.n	8000d66 <_malloc_r+0xf6>
 8000cb4:	f8d8 4000 	ldr.w	r4, [r8]
 8000cb8:	4627      	mov	r7, r4
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d143      	bne.n	8000d46 <_malloc_r+0xd6>
 8000cbe:	2c00      	cmp	r4, #0
 8000cc0:	d04b      	beq.n	8000d5a <_malloc_r+0xea>
 8000cc2:	6823      	ldr	r3, [r4, #0]
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	4630      	mov	r0, r6
 8000cc8:	eb04 0903 	add.w	r9, r4, r3
 8000ccc:	f000 fc02 	bl	80014d4 <_sbrk_r>
 8000cd0:	4581      	cmp	r9, r0
 8000cd2:	d142      	bne.n	8000d5a <_malloc_r+0xea>
 8000cd4:	6821      	ldr	r1, [r4, #0]
 8000cd6:	1a6d      	subs	r5, r5, r1
 8000cd8:	4629      	mov	r1, r5
 8000cda:	4630      	mov	r0, r6
 8000cdc:	f7ff ffa6 	bl	8000c2c <sbrk_aligned>
 8000ce0:	3001      	adds	r0, #1
 8000ce2:	d03a      	beq.n	8000d5a <_malloc_r+0xea>
 8000ce4:	6823      	ldr	r3, [r4, #0]
 8000ce6:	442b      	add	r3, r5
 8000ce8:	6023      	str	r3, [r4, #0]
 8000cea:	f8d8 3000 	ldr.w	r3, [r8]
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	bb62      	cbnz	r2, 8000d4c <_malloc_r+0xdc>
 8000cf2:	f8c8 7000 	str.w	r7, [r8]
 8000cf6:	e00f      	b.n	8000d18 <_malloc_r+0xa8>
 8000cf8:	6822      	ldr	r2, [r4, #0]
 8000cfa:	1b52      	subs	r2, r2, r5
 8000cfc:	d420      	bmi.n	8000d40 <_malloc_r+0xd0>
 8000cfe:	2a0b      	cmp	r2, #11
 8000d00:	d917      	bls.n	8000d32 <_malloc_r+0xc2>
 8000d02:	1961      	adds	r1, r4, r5
 8000d04:	42a3      	cmp	r3, r4
 8000d06:	6025      	str	r5, [r4, #0]
 8000d08:	bf18      	it	ne
 8000d0a:	6059      	strne	r1, [r3, #4]
 8000d0c:	6863      	ldr	r3, [r4, #4]
 8000d0e:	bf08      	it	eq
 8000d10:	f8c8 1000 	streq.w	r1, [r8]
 8000d14:	5162      	str	r2, [r4, r5]
 8000d16:	604b      	str	r3, [r1, #4]
 8000d18:	4630      	mov	r0, r6
 8000d1a:	f000 fa67 	bl	80011ec <__malloc_unlock>
 8000d1e:	f104 000b 	add.w	r0, r4, #11
 8000d22:	1d23      	adds	r3, r4, #4
 8000d24:	f020 0007 	bic.w	r0, r0, #7
 8000d28:	1ac2      	subs	r2, r0, r3
 8000d2a:	bf1c      	itt	ne
 8000d2c:	1a1b      	subne	r3, r3, r0
 8000d2e:	50a3      	strne	r3, [r4, r2]
 8000d30:	e7af      	b.n	8000c92 <_malloc_r+0x22>
 8000d32:	6862      	ldr	r2, [r4, #4]
 8000d34:	42a3      	cmp	r3, r4
 8000d36:	bf0c      	ite	eq
 8000d38:	f8c8 2000 	streq.w	r2, [r8]
 8000d3c:	605a      	strne	r2, [r3, #4]
 8000d3e:	e7eb      	b.n	8000d18 <_malloc_r+0xa8>
 8000d40:	4623      	mov	r3, r4
 8000d42:	6864      	ldr	r4, [r4, #4]
 8000d44:	e7ae      	b.n	8000ca4 <_malloc_r+0x34>
 8000d46:	463c      	mov	r4, r7
 8000d48:	687f      	ldr	r7, [r7, #4]
 8000d4a:	e7b6      	b.n	8000cba <_malloc_r+0x4a>
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	42a3      	cmp	r3, r4
 8000d52:	d1fb      	bne.n	8000d4c <_malloc_r+0xdc>
 8000d54:	2300      	movs	r3, #0
 8000d56:	6053      	str	r3, [r2, #4]
 8000d58:	e7de      	b.n	8000d18 <_malloc_r+0xa8>
 8000d5a:	230c      	movs	r3, #12
 8000d5c:	6033      	str	r3, [r6, #0]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	f000 fa44 	bl	80011ec <__malloc_unlock>
 8000d64:	e794      	b.n	8000c90 <_malloc_r+0x20>
 8000d66:	6005      	str	r5, [r0, #0]
 8000d68:	e7d6      	b.n	8000d18 <_malloc_r+0xa8>
 8000d6a:	bf00      	nop
 8000d6c:	240001c0 	.word	0x240001c0

08000d70 <_printf_common>:
 8000d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d74:	4616      	mov	r6, r2
 8000d76:	4698      	mov	r8, r3
 8000d78:	688a      	ldr	r2, [r1, #8]
 8000d7a:	690b      	ldr	r3, [r1, #16]
 8000d7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000d80:	4293      	cmp	r3, r2
 8000d82:	bfb8      	it	lt
 8000d84:	4613      	movlt	r3, r2
 8000d86:	6033      	str	r3, [r6, #0]
 8000d88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000d8c:	4607      	mov	r7, r0
 8000d8e:	460c      	mov	r4, r1
 8000d90:	b10a      	cbz	r2, 8000d96 <_printf_common+0x26>
 8000d92:	3301      	adds	r3, #1
 8000d94:	6033      	str	r3, [r6, #0]
 8000d96:	6823      	ldr	r3, [r4, #0]
 8000d98:	0699      	lsls	r1, r3, #26
 8000d9a:	bf42      	ittt	mi
 8000d9c:	6833      	ldrmi	r3, [r6, #0]
 8000d9e:	3302      	addmi	r3, #2
 8000da0:	6033      	strmi	r3, [r6, #0]
 8000da2:	6825      	ldr	r5, [r4, #0]
 8000da4:	f015 0506 	ands.w	r5, r5, #6
 8000da8:	d106      	bne.n	8000db8 <_printf_common+0x48>
 8000daa:	f104 0a19 	add.w	sl, r4, #25
 8000dae:	68e3      	ldr	r3, [r4, #12]
 8000db0:	6832      	ldr	r2, [r6, #0]
 8000db2:	1a9b      	subs	r3, r3, r2
 8000db4:	42ab      	cmp	r3, r5
 8000db6:	dc26      	bgt.n	8000e06 <_printf_common+0x96>
 8000db8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000dbc:	6822      	ldr	r2, [r4, #0]
 8000dbe:	3b00      	subs	r3, #0
 8000dc0:	bf18      	it	ne
 8000dc2:	2301      	movne	r3, #1
 8000dc4:	0692      	lsls	r2, r2, #26
 8000dc6:	d42b      	bmi.n	8000e20 <_printf_common+0xb0>
 8000dc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000dcc:	4641      	mov	r1, r8
 8000dce:	4638      	mov	r0, r7
 8000dd0:	47c8      	blx	r9
 8000dd2:	3001      	adds	r0, #1
 8000dd4:	d01e      	beq.n	8000e14 <_printf_common+0xa4>
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	6922      	ldr	r2, [r4, #16]
 8000dda:	f003 0306 	and.w	r3, r3, #6
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf02      	ittt	eq
 8000de2:	68e5      	ldreq	r5, [r4, #12]
 8000de4:	6833      	ldreq	r3, [r6, #0]
 8000de6:	1aed      	subeq	r5, r5, r3
 8000de8:	68a3      	ldr	r3, [r4, #8]
 8000dea:	bf0c      	ite	eq
 8000dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000df0:	2500      	movne	r5, #0
 8000df2:	4293      	cmp	r3, r2
 8000df4:	bfc4      	itt	gt
 8000df6:	1a9b      	subgt	r3, r3, r2
 8000df8:	18ed      	addgt	r5, r5, r3
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	341a      	adds	r4, #26
 8000dfe:	42b5      	cmp	r5, r6
 8000e00:	d11a      	bne.n	8000e38 <_printf_common+0xc8>
 8000e02:	2000      	movs	r0, #0
 8000e04:	e008      	b.n	8000e18 <_printf_common+0xa8>
 8000e06:	2301      	movs	r3, #1
 8000e08:	4652      	mov	r2, sl
 8000e0a:	4641      	mov	r1, r8
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	47c8      	blx	r9
 8000e10:	3001      	adds	r0, #1
 8000e12:	d103      	bne.n	8000e1c <_printf_common+0xac>
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1c:	3501      	adds	r5, #1
 8000e1e:	e7c6      	b.n	8000dae <_printf_common+0x3e>
 8000e20:	18e1      	adds	r1, r4, r3
 8000e22:	1c5a      	adds	r2, r3, #1
 8000e24:	2030      	movs	r0, #48	@ 0x30
 8000e26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000e2a:	4422      	add	r2, r4
 8000e2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000e30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000e34:	3302      	adds	r3, #2
 8000e36:	e7c7      	b.n	8000dc8 <_printf_common+0x58>
 8000e38:	2301      	movs	r3, #1
 8000e3a:	4622      	mov	r2, r4
 8000e3c:	4641      	mov	r1, r8
 8000e3e:	4638      	mov	r0, r7
 8000e40:	47c8      	blx	r9
 8000e42:	3001      	adds	r0, #1
 8000e44:	d0e6      	beq.n	8000e14 <_printf_common+0xa4>
 8000e46:	3601      	adds	r6, #1
 8000e48:	e7d9      	b.n	8000dfe <_printf_common+0x8e>
	...

08000e4c <_printf_i>:
 8000e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e50:	7e0f      	ldrb	r7, [r1, #24]
 8000e52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000e54:	2f78      	cmp	r7, #120	@ 0x78
 8000e56:	4691      	mov	r9, r2
 8000e58:	4680      	mov	r8, r0
 8000e5a:	460c      	mov	r4, r1
 8000e5c:	469a      	mov	sl, r3
 8000e5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000e62:	d807      	bhi.n	8000e74 <_printf_i+0x28>
 8000e64:	2f62      	cmp	r7, #98	@ 0x62
 8000e66:	d80a      	bhi.n	8000e7e <_printf_i+0x32>
 8000e68:	2f00      	cmp	r7, #0
 8000e6a:	f000 80d1 	beq.w	8001010 <_printf_i+0x1c4>
 8000e6e:	2f58      	cmp	r7, #88	@ 0x58
 8000e70:	f000 80b8 	beq.w	8000fe4 <_printf_i+0x198>
 8000e74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000e7c:	e03a      	b.n	8000ef4 <_printf_i+0xa8>
 8000e7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000e82:	2b15      	cmp	r3, #21
 8000e84:	d8f6      	bhi.n	8000e74 <_printf_i+0x28>
 8000e86:	a101      	add	r1, pc, #4	@ (adr r1, 8000e8c <_printf_i+0x40>)
 8000e88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e8c:	08000ee5 	.word	0x08000ee5
 8000e90:	08000ef9 	.word	0x08000ef9
 8000e94:	08000e75 	.word	0x08000e75
 8000e98:	08000e75 	.word	0x08000e75
 8000e9c:	08000e75 	.word	0x08000e75
 8000ea0:	08000e75 	.word	0x08000e75
 8000ea4:	08000ef9 	.word	0x08000ef9
 8000ea8:	08000e75 	.word	0x08000e75
 8000eac:	08000e75 	.word	0x08000e75
 8000eb0:	08000e75 	.word	0x08000e75
 8000eb4:	08000e75 	.word	0x08000e75
 8000eb8:	08000ff7 	.word	0x08000ff7
 8000ebc:	08000f23 	.word	0x08000f23
 8000ec0:	08000fb1 	.word	0x08000fb1
 8000ec4:	08000e75 	.word	0x08000e75
 8000ec8:	08000e75 	.word	0x08000e75
 8000ecc:	08001019 	.word	0x08001019
 8000ed0:	08000e75 	.word	0x08000e75
 8000ed4:	08000f23 	.word	0x08000f23
 8000ed8:	08000e75 	.word	0x08000e75
 8000edc:	08000e75 	.word	0x08000e75
 8000ee0:	08000fb9 	.word	0x08000fb9
 8000ee4:	6833      	ldr	r3, [r6, #0]
 8000ee6:	1d1a      	adds	r2, r3, #4
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6032      	str	r2, [r6, #0]
 8000eec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ef0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e09c      	b.n	8001032 <_printf_i+0x1e6>
 8000ef8:	6833      	ldr	r3, [r6, #0]
 8000efa:	6820      	ldr	r0, [r4, #0]
 8000efc:	1d19      	adds	r1, r3, #4
 8000efe:	6031      	str	r1, [r6, #0]
 8000f00:	0606      	lsls	r6, r0, #24
 8000f02:	d501      	bpl.n	8000f08 <_printf_i+0xbc>
 8000f04:	681d      	ldr	r5, [r3, #0]
 8000f06:	e003      	b.n	8000f10 <_printf_i+0xc4>
 8000f08:	0645      	lsls	r5, r0, #25
 8000f0a:	d5fb      	bpl.n	8000f04 <_printf_i+0xb8>
 8000f0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000f10:	2d00      	cmp	r5, #0
 8000f12:	da03      	bge.n	8000f1c <_printf_i+0xd0>
 8000f14:	232d      	movs	r3, #45	@ 0x2d
 8000f16:	426d      	negs	r5, r5
 8000f18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f1c:	4858      	ldr	r0, [pc, #352]	@ (8001080 <_printf_i+0x234>)
 8000f1e:	230a      	movs	r3, #10
 8000f20:	e011      	b.n	8000f46 <_printf_i+0xfa>
 8000f22:	6821      	ldr	r1, [r4, #0]
 8000f24:	6833      	ldr	r3, [r6, #0]
 8000f26:	0608      	lsls	r0, r1, #24
 8000f28:	f853 5b04 	ldr.w	r5, [r3], #4
 8000f2c:	d402      	bmi.n	8000f34 <_printf_i+0xe8>
 8000f2e:	0649      	lsls	r1, r1, #25
 8000f30:	bf48      	it	mi
 8000f32:	b2ad      	uxthmi	r5, r5
 8000f34:	2f6f      	cmp	r7, #111	@ 0x6f
 8000f36:	4852      	ldr	r0, [pc, #328]	@ (8001080 <_printf_i+0x234>)
 8000f38:	6033      	str	r3, [r6, #0]
 8000f3a:	bf14      	ite	ne
 8000f3c:	230a      	movne	r3, #10
 8000f3e:	2308      	moveq	r3, #8
 8000f40:	2100      	movs	r1, #0
 8000f42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000f46:	6866      	ldr	r6, [r4, #4]
 8000f48:	60a6      	str	r6, [r4, #8]
 8000f4a:	2e00      	cmp	r6, #0
 8000f4c:	db05      	blt.n	8000f5a <_printf_i+0x10e>
 8000f4e:	6821      	ldr	r1, [r4, #0]
 8000f50:	432e      	orrs	r6, r5
 8000f52:	f021 0104 	bic.w	r1, r1, #4
 8000f56:	6021      	str	r1, [r4, #0]
 8000f58:	d04b      	beq.n	8000ff2 <_printf_i+0x1a6>
 8000f5a:	4616      	mov	r6, r2
 8000f5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8000f60:	fb03 5711 	mls	r7, r3, r1, r5
 8000f64:	5dc7      	ldrb	r7, [r0, r7]
 8000f66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000f6a:	462f      	mov	r7, r5
 8000f6c:	42bb      	cmp	r3, r7
 8000f6e:	460d      	mov	r5, r1
 8000f70:	d9f4      	bls.n	8000f5c <_printf_i+0x110>
 8000f72:	2b08      	cmp	r3, #8
 8000f74:	d10b      	bne.n	8000f8e <_printf_i+0x142>
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	07df      	lsls	r7, r3, #31
 8000f7a:	d508      	bpl.n	8000f8e <_printf_i+0x142>
 8000f7c:	6923      	ldr	r3, [r4, #16]
 8000f7e:	6861      	ldr	r1, [r4, #4]
 8000f80:	4299      	cmp	r1, r3
 8000f82:	bfde      	ittt	le
 8000f84:	2330      	movle	r3, #48	@ 0x30
 8000f86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f8a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000f8e:	1b92      	subs	r2, r2, r6
 8000f90:	6122      	str	r2, [r4, #16]
 8000f92:	f8cd a000 	str.w	sl, [sp]
 8000f96:	464b      	mov	r3, r9
 8000f98:	aa03      	add	r2, sp, #12
 8000f9a:	4621      	mov	r1, r4
 8000f9c:	4640      	mov	r0, r8
 8000f9e:	f7ff fee7 	bl	8000d70 <_printf_common>
 8000fa2:	3001      	adds	r0, #1
 8000fa4:	d14a      	bne.n	800103c <_printf_i+0x1f0>
 8000fa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000faa:	b004      	add	sp, #16
 8000fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb0:	6823      	ldr	r3, [r4, #0]
 8000fb2:	f043 0320 	orr.w	r3, r3, #32
 8000fb6:	6023      	str	r3, [r4, #0]
 8000fb8:	4832      	ldr	r0, [pc, #200]	@ (8001084 <_printf_i+0x238>)
 8000fba:	2778      	movs	r7, #120	@ 0x78
 8000fbc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000fc0:	6823      	ldr	r3, [r4, #0]
 8000fc2:	6831      	ldr	r1, [r6, #0]
 8000fc4:	061f      	lsls	r7, r3, #24
 8000fc6:	f851 5b04 	ldr.w	r5, [r1], #4
 8000fca:	d402      	bmi.n	8000fd2 <_printf_i+0x186>
 8000fcc:	065f      	lsls	r7, r3, #25
 8000fce:	bf48      	it	mi
 8000fd0:	b2ad      	uxthmi	r5, r5
 8000fd2:	6031      	str	r1, [r6, #0]
 8000fd4:	07d9      	lsls	r1, r3, #31
 8000fd6:	bf44      	itt	mi
 8000fd8:	f043 0320 	orrmi.w	r3, r3, #32
 8000fdc:	6023      	strmi	r3, [r4, #0]
 8000fde:	b11d      	cbz	r5, 8000fe8 <_printf_i+0x19c>
 8000fe0:	2310      	movs	r3, #16
 8000fe2:	e7ad      	b.n	8000f40 <_printf_i+0xf4>
 8000fe4:	4826      	ldr	r0, [pc, #152]	@ (8001080 <_printf_i+0x234>)
 8000fe6:	e7e9      	b.n	8000fbc <_printf_i+0x170>
 8000fe8:	6823      	ldr	r3, [r4, #0]
 8000fea:	f023 0320 	bic.w	r3, r3, #32
 8000fee:	6023      	str	r3, [r4, #0]
 8000ff0:	e7f6      	b.n	8000fe0 <_printf_i+0x194>
 8000ff2:	4616      	mov	r6, r2
 8000ff4:	e7bd      	b.n	8000f72 <_printf_i+0x126>
 8000ff6:	6833      	ldr	r3, [r6, #0]
 8000ff8:	6825      	ldr	r5, [r4, #0]
 8000ffa:	6961      	ldr	r1, [r4, #20]
 8000ffc:	1d18      	adds	r0, r3, #4
 8000ffe:	6030      	str	r0, [r6, #0]
 8001000:	062e      	lsls	r6, r5, #24
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	d501      	bpl.n	800100a <_printf_i+0x1be>
 8001006:	6019      	str	r1, [r3, #0]
 8001008:	e002      	b.n	8001010 <_printf_i+0x1c4>
 800100a:	0668      	lsls	r0, r5, #25
 800100c:	d5fb      	bpl.n	8001006 <_printf_i+0x1ba>
 800100e:	8019      	strh	r1, [r3, #0]
 8001010:	2300      	movs	r3, #0
 8001012:	6123      	str	r3, [r4, #16]
 8001014:	4616      	mov	r6, r2
 8001016:	e7bc      	b.n	8000f92 <_printf_i+0x146>
 8001018:	6833      	ldr	r3, [r6, #0]
 800101a:	1d1a      	adds	r2, r3, #4
 800101c:	6032      	str	r2, [r6, #0]
 800101e:	681e      	ldr	r6, [r3, #0]
 8001020:	6862      	ldr	r2, [r4, #4]
 8001022:	2100      	movs	r1, #0
 8001024:	4630      	mov	r0, r6
 8001026:	f7ff f963 	bl	80002f0 <memchr>
 800102a:	b108      	cbz	r0, 8001030 <_printf_i+0x1e4>
 800102c:	1b80      	subs	r0, r0, r6
 800102e:	6060      	str	r0, [r4, #4]
 8001030:	6863      	ldr	r3, [r4, #4]
 8001032:	6123      	str	r3, [r4, #16]
 8001034:	2300      	movs	r3, #0
 8001036:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800103a:	e7aa      	b.n	8000f92 <_printf_i+0x146>
 800103c:	6923      	ldr	r3, [r4, #16]
 800103e:	4632      	mov	r2, r6
 8001040:	4649      	mov	r1, r9
 8001042:	4640      	mov	r0, r8
 8001044:	47d0      	blx	sl
 8001046:	3001      	adds	r0, #1
 8001048:	d0ad      	beq.n	8000fa6 <_printf_i+0x15a>
 800104a:	6823      	ldr	r3, [r4, #0]
 800104c:	079b      	lsls	r3, r3, #30
 800104e:	d413      	bmi.n	8001078 <_printf_i+0x22c>
 8001050:	68e0      	ldr	r0, [r4, #12]
 8001052:	9b03      	ldr	r3, [sp, #12]
 8001054:	4298      	cmp	r0, r3
 8001056:	bfb8      	it	lt
 8001058:	4618      	movlt	r0, r3
 800105a:	e7a6      	b.n	8000faa <_printf_i+0x15e>
 800105c:	2301      	movs	r3, #1
 800105e:	4632      	mov	r2, r6
 8001060:	4649      	mov	r1, r9
 8001062:	4640      	mov	r0, r8
 8001064:	47d0      	blx	sl
 8001066:	3001      	adds	r0, #1
 8001068:	d09d      	beq.n	8000fa6 <_printf_i+0x15a>
 800106a:	3501      	adds	r5, #1
 800106c:	68e3      	ldr	r3, [r4, #12]
 800106e:	9903      	ldr	r1, [sp, #12]
 8001070:	1a5b      	subs	r3, r3, r1
 8001072:	42ab      	cmp	r3, r5
 8001074:	dcf2      	bgt.n	800105c <_printf_i+0x210>
 8001076:	e7eb      	b.n	8001050 <_printf_i+0x204>
 8001078:	2500      	movs	r5, #0
 800107a:	f104 0619 	add.w	r6, r4, #25
 800107e:	e7f5      	b.n	800106c <_printf_i+0x220>
 8001080:	0800162d 	.word	0x0800162d
 8001084:	0800163e 	.word	0x0800163e

08001088 <__sflush_r>:
 8001088:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800108c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001090:	0716      	lsls	r6, r2, #28
 8001092:	4605      	mov	r5, r0
 8001094:	460c      	mov	r4, r1
 8001096:	d454      	bmi.n	8001142 <__sflush_r+0xba>
 8001098:	684b      	ldr	r3, [r1, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	dc02      	bgt.n	80010a4 <__sflush_r+0x1c>
 800109e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	dd48      	ble.n	8001136 <__sflush_r+0xae>
 80010a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d045      	beq.n	8001136 <__sflush_r+0xae>
 80010aa:	2300      	movs	r3, #0
 80010ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80010b0:	682f      	ldr	r7, [r5, #0]
 80010b2:	6a21      	ldr	r1, [r4, #32]
 80010b4:	602b      	str	r3, [r5, #0]
 80010b6:	d030      	beq.n	800111a <__sflush_r+0x92>
 80010b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80010ba:	89a3      	ldrh	r3, [r4, #12]
 80010bc:	0759      	lsls	r1, r3, #29
 80010be:	d505      	bpl.n	80010cc <__sflush_r+0x44>
 80010c0:	6863      	ldr	r3, [r4, #4]
 80010c2:	1ad2      	subs	r2, r2, r3
 80010c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80010c6:	b10b      	cbz	r3, 80010cc <__sflush_r+0x44>
 80010c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80010ca:	1ad2      	subs	r2, r2, r3
 80010cc:	2300      	movs	r3, #0
 80010ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80010d0:	6a21      	ldr	r1, [r4, #32]
 80010d2:	4628      	mov	r0, r5
 80010d4:	47b0      	blx	r6
 80010d6:	1c43      	adds	r3, r0, #1
 80010d8:	89a3      	ldrh	r3, [r4, #12]
 80010da:	d106      	bne.n	80010ea <__sflush_r+0x62>
 80010dc:	6829      	ldr	r1, [r5, #0]
 80010de:	291d      	cmp	r1, #29
 80010e0:	d82b      	bhi.n	800113a <__sflush_r+0xb2>
 80010e2:	4a2a      	ldr	r2, [pc, #168]	@ (800118c <__sflush_r+0x104>)
 80010e4:	40ca      	lsrs	r2, r1
 80010e6:	07d6      	lsls	r6, r2, #31
 80010e8:	d527      	bpl.n	800113a <__sflush_r+0xb2>
 80010ea:	2200      	movs	r2, #0
 80010ec:	6062      	str	r2, [r4, #4]
 80010ee:	04d9      	lsls	r1, r3, #19
 80010f0:	6922      	ldr	r2, [r4, #16]
 80010f2:	6022      	str	r2, [r4, #0]
 80010f4:	d504      	bpl.n	8001100 <__sflush_r+0x78>
 80010f6:	1c42      	adds	r2, r0, #1
 80010f8:	d101      	bne.n	80010fe <__sflush_r+0x76>
 80010fa:	682b      	ldr	r3, [r5, #0]
 80010fc:	b903      	cbnz	r3, 8001100 <__sflush_r+0x78>
 80010fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8001100:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001102:	602f      	str	r7, [r5, #0]
 8001104:	b1b9      	cbz	r1, 8001136 <__sflush_r+0xae>
 8001106:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800110a:	4299      	cmp	r1, r3
 800110c:	d002      	beq.n	8001114 <__sflush_r+0x8c>
 800110e:	4628      	mov	r0, r5
 8001110:	f000 fa24 	bl	800155c <_free_r>
 8001114:	2300      	movs	r3, #0
 8001116:	6363      	str	r3, [r4, #52]	@ 0x34
 8001118:	e00d      	b.n	8001136 <__sflush_r+0xae>
 800111a:	2301      	movs	r3, #1
 800111c:	4628      	mov	r0, r5
 800111e:	47b0      	blx	r6
 8001120:	4602      	mov	r2, r0
 8001122:	1c50      	adds	r0, r2, #1
 8001124:	d1c9      	bne.n	80010ba <__sflush_r+0x32>
 8001126:	682b      	ldr	r3, [r5, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0c6      	beq.n	80010ba <__sflush_r+0x32>
 800112c:	2b1d      	cmp	r3, #29
 800112e:	d001      	beq.n	8001134 <__sflush_r+0xac>
 8001130:	2b16      	cmp	r3, #22
 8001132:	d11e      	bne.n	8001172 <__sflush_r+0xea>
 8001134:	602f      	str	r7, [r5, #0]
 8001136:	2000      	movs	r0, #0
 8001138:	e022      	b.n	8001180 <__sflush_r+0xf8>
 800113a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800113e:	b21b      	sxth	r3, r3
 8001140:	e01b      	b.n	800117a <__sflush_r+0xf2>
 8001142:	690f      	ldr	r7, [r1, #16]
 8001144:	2f00      	cmp	r7, #0
 8001146:	d0f6      	beq.n	8001136 <__sflush_r+0xae>
 8001148:	0793      	lsls	r3, r2, #30
 800114a:	680e      	ldr	r6, [r1, #0]
 800114c:	bf08      	it	eq
 800114e:	694b      	ldreq	r3, [r1, #20]
 8001150:	600f      	str	r7, [r1, #0]
 8001152:	bf18      	it	ne
 8001154:	2300      	movne	r3, #0
 8001156:	eba6 0807 	sub.w	r8, r6, r7
 800115a:	608b      	str	r3, [r1, #8]
 800115c:	f1b8 0f00 	cmp.w	r8, #0
 8001160:	dde9      	ble.n	8001136 <__sflush_r+0xae>
 8001162:	6a21      	ldr	r1, [r4, #32]
 8001164:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001166:	4643      	mov	r3, r8
 8001168:	463a      	mov	r2, r7
 800116a:	4628      	mov	r0, r5
 800116c:	47b0      	blx	r6
 800116e:	2800      	cmp	r0, #0
 8001170:	dc08      	bgt.n	8001184 <__sflush_r+0xfc>
 8001172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800117a:	81a3      	strh	r3, [r4, #12]
 800117c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001184:	4407      	add	r7, r0
 8001186:	eba8 0800 	sub.w	r8, r8, r0
 800118a:	e7e7      	b.n	800115c <__sflush_r+0xd4>
 800118c:	20400001 	.word	0x20400001

08001190 <_fflush_r>:
 8001190:	b538      	push	{r3, r4, r5, lr}
 8001192:	690b      	ldr	r3, [r1, #16]
 8001194:	4605      	mov	r5, r0
 8001196:	460c      	mov	r4, r1
 8001198:	b913      	cbnz	r3, 80011a0 <_fflush_r+0x10>
 800119a:	2500      	movs	r5, #0
 800119c:	4628      	mov	r0, r5
 800119e:	bd38      	pop	{r3, r4, r5, pc}
 80011a0:	b118      	cbz	r0, 80011aa <_fflush_r+0x1a>
 80011a2:	6a03      	ldr	r3, [r0, #32]
 80011a4:	b90b      	cbnz	r3, 80011aa <_fflush_r+0x1a>
 80011a6:	f7ff fb83 	bl	80008b0 <__sinit>
 80011aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f3      	beq.n	800119a <_fflush_r+0xa>
 80011b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80011b4:	07d0      	lsls	r0, r2, #31
 80011b6:	d404      	bmi.n	80011c2 <_fflush_r+0x32>
 80011b8:	0599      	lsls	r1, r3, #22
 80011ba:	d402      	bmi.n	80011c2 <_fflush_r+0x32>
 80011bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011be:	f7ff fbf2 	bl	80009a6 <__retarget_lock_acquire_recursive>
 80011c2:	4628      	mov	r0, r5
 80011c4:	4621      	mov	r1, r4
 80011c6:	f7ff ff5f 	bl	8001088 <__sflush_r>
 80011ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80011cc:	07da      	lsls	r2, r3, #31
 80011ce:	4605      	mov	r5, r0
 80011d0:	d4e4      	bmi.n	800119c <_fflush_r+0xc>
 80011d2:	89a3      	ldrh	r3, [r4, #12]
 80011d4:	059b      	lsls	r3, r3, #22
 80011d6:	d4e1      	bmi.n	800119c <_fflush_r+0xc>
 80011d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011da:	f7ff fbe5 	bl	80009a8 <__retarget_lock_release_recursive>
 80011de:	e7dd      	b.n	800119c <_fflush_r+0xc>

080011e0 <__malloc_lock>:
 80011e0:	4801      	ldr	r0, [pc, #4]	@ (80011e8 <__malloc_lock+0x8>)
 80011e2:	f7ff bbe0 	b.w	80009a6 <__retarget_lock_acquire_recursive>
 80011e6:	bf00      	nop
 80011e8:	240001b8 	.word	0x240001b8

080011ec <__malloc_unlock>:
 80011ec:	4801      	ldr	r0, [pc, #4]	@ (80011f4 <__malloc_unlock+0x8>)
 80011ee:	f7ff bbdb 	b.w	80009a8 <__retarget_lock_release_recursive>
 80011f2:	bf00      	nop
 80011f4:	240001b8 	.word	0x240001b8

080011f8 <__sread>:
 80011f8:	b510      	push	{r4, lr}
 80011fa:	460c      	mov	r4, r1
 80011fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001200:	f000 f956 	bl	80014b0 <_read_r>
 8001204:	2800      	cmp	r0, #0
 8001206:	bfab      	itete	ge
 8001208:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800120a:	89a3      	ldrhlt	r3, [r4, #12]
 800120c:	181b      	addge	r3, r3, r0
 800120e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001212:	bfac      	ite	ge
 8001214:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001216:	81a3      	strhlt	r3, [r4, #12]
 8001218:	bd10      	pop	{r4, pc}

0800121a <__swrite>:
 800121a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800121e:	461f      	mov	r7, r3
 8001220:	898b      	ldrh	r3, [r1, #12]
 8001222:	05db      	lsls	r3, r3, #23
 8001224:	4605      	mov	r5, r0
 8001226:	460c      	mov	r4, r1
 8001228:	4616      	mov	r6, r2
 800122a:	d505      	bpl.n	8001238 <__swrite+0x1e>
 800122c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001230:	2302      	movs	r3, #2
 8001232:	2200      	movs	r2, #0
 8001234:	f000 f92a 	bl	800148c <_lseek_r>
 8001238:	89a3      	ldrh	r3, [r4, #12]
 800123a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800123e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001242:	81a3      	strh	r3, [r4, #12]
 8001244:	4632      	mov	r2, r6
 8001246:	463b      	mov	r3, r7
 8001248:	4628      	mov	r0, r5
 800124a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800124e:	f000 b951 	b.w	80014f4 <_write_r>

08001252 <__sseek>:
 8001252:	b510      	push	{r4, lr}
 8001254:	460c      	mov	r4, r1
 8001256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800125a:	f000 f917 	bl	800148c <_lseek_r>
 800125e:	1c43      	adds	r3, r0, #1
 8001260:	89a3      	ldrh	r3, [r4, #12]
 8001262:	bf15      	itete	ne
 8001264:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001266:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800126a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800126e:	81a3      	strheq	r3, [r4, #12]
 8001270:	bf18      	it	ne
 8001272:	81a3      	strhne	r3, [r4, #12]
 8001274:	bd10      	pop	{r4, pc}

08001276 <__sclose>:
 8001276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800127a:	f000 b94d 	b.w	8001518 <_close_r>

0800127e <__swbuf_r>:
 800127e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001280:	460e      	mov	r6, r1
 8001282:	4614      	mov	r4, r2
 8001284:	4605      	mov	r5, r0
 8001286:	b118      	cbz	r0, 8001290 <__swbuf_r+0x12>
 8001288:	6a03      	ldr	r3, [r0, #32]
 800128a:	b90b      	cbnz	r3, 8001290 <__swbuf_r+0x12>
 800128c:	f7ff fb10 	bl	80008b0 <__sinit>
 8001290:	69a3      	ldr	r3, [r4, #24]
 8001292:	60a3      	str	r3, [r4, #8]
 8001294:	89a3      	ldrh	r3, [r4, #12]
 8001296:	071a      	lsls	r2, r3, #28
 8001298:	d501      	bpl.n	800129e <__swbuf_r+0x20>
 800129a:	6923      	ldr	r3, [r4, #16]
 800129c:	b943      	cbnz	r3, 80012b0 <__swbuf_r+0x32>
 800129e:	4621      	mov	r1, r4
 80012a0:	4628      	mov	r0, r5
 80012a2:	f000 f82b 	bl	80012fc <__swsetup_r>
 80012a6:	b118      	cbz	r0, 80012b0 <__swbuf_r+0x32>
 80012a8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80012ac:	4638      	mov	r0, r7
 80012ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	6922      	ldr	r2, [r4, #16]
 80012b4:	1a98      	subs	r0, r3, r2
 80012b6:	6963      	ldr	r3, [r4, #20]
 80012b8:	b2f6      	uxtb	r6, r6
 80012ba:	4283      	cmp	r3, r0
 80012bc:	4637      	mov	r7, r6
 80012be:	dc05      	bgt.n	80012cc <__swbuf_r+0x4e>
 80012c0:	4621      	mov	r1, r4
 80012c2:	4628      	mov	r0, r5
 80012c4:	f7ff ff64 	bl	8001190 <_fflush_r>
 80012c8:	2800      	cmp	r0, #0
 80012ca:	d1ed      	bne.n	80012a8 <__swbuf_r+0x2a>
 80012cc:	68a3      	ldr	r3, [r4, #8]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	60a3      	str	r3, [r4, #8]
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	6022      	str	r2, [r4, #0]
 80012d8:	701e      	strb	r6, [r3, #0]
 80012da:	6962      	ldr	r2, [r4, #20]
 80012dc:	1c43      	adds	r3, r0, #1
 80012de:	429a      	cmp	r2, r3
 80012e0:	d004      	beq.n	80012ec <__swbuf_r+0x6e>
 80012e2:	89a3      	ldrh	r3, [r4, #12]
 80012e4:	07db      	lsls	r3, r3, #31
 80012e6:	d5e1      	bpl.n	80012ac <__swbuf_r+0x2e>
 80012e8:	2e0a      	cmp	r6, #10
 80012ea:	d1df      	bne.n	80012ac <__swbuf_r+0x2e>
 80012ec:	4621      	mov	r1, r4
 80012ee:	4628      	mov	r0, r5
 80012f0:	f7ff ff4e 	bl	8001190 <_fflush_r>
 80012f4:	2800      	cmp	r0, #0
 80012f6:	d0d9      	beq.n	80012ac <__swbuf_r+0x2e>
 80012f8:	e7d6      	b.n	80012a8 <__swbuf_r+0x2a>
	...

080012fc <__swsetup_r>:
 80012fc:	b538      	push	{r3, r4, r5, lr}
 80012fe:	4b29      	ldr	r3, [pc, #164]	@ (80013a4 <__swsetup_r+0xa8>)
 8001300:	4605      	mov	r5, r0
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	460c      	mov	r4, r1
 8001306:	b118      	cbz	r0, 8001310 <__swsetup_r+0x14>
 8001308:	6a03      	ldr	r3, [r0, #32]
 800130a:	b90b      	cbnz	r3, 8001310 <__swsetup_r+0x14>
 800130c:	f7ff fad0 	bl	80008b0 <__sinit>
 8001310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001314:	0719      	lsls	r1, r3, #28
 8001316:	d422      	bmi.n	800135e <__swsetup_r+0x62>
 8001318:	06da      	lsls	r2, r3, #27
 800131a:	d407      	bmi.n	800132c <__swsetup_r+0x30>
 800131c:	2209      	movs	r2, #9
 800131e:	602a      	str	r2, [r5, #0]
 8001320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001324:	81a3      	strh	r3, [r4, #12]
 8001326:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800132a:	e033      	b.n	8001394 <__swsetup_r+0x98>
 800132c:	0758      	lsls	r0, r3, #29
 800132e:	d512      	bpl.n	8001356 <__swsetup_r+0x5a>
 8001330:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001332:	b141      	cbz	r1, 8001346 <__swsetup_r+0x4a>
 8001334:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001338:	4299      	cmp	r1, r3
 800133a:	d002      	beq.n	8001342 <__swsetup_r+0x46>
 800133c:	4628      	mov	r0, r5
 800133e:	f000 f90d 	bl	800155c <_free_r>
 8001342:	2300      	movs	r3, #0
 8001344:	6363      	str	r3, [r4, #52]	@ 0x34
 8001346:	89a3      	ldrh	r3, [r4, #12]
 8001348:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800134c:	81a3      	strh	r3, [r4, #12]
 800134e:	2300      	movs	r3, #0
 8001350:	6063      	str	r3, [r4, #4]
 8001352:	6923      	ldr	r3, [r4, #16]
 8001354:	6023      	str	r3, [r4, #0]
 8001356:	89a3      	ldrh	r3, [r4, #12]
 8001358:	f043 0308 	orr.w	r3, r3, #8
 800135c:	81a3      	strh	r3, [r4, #12]
 800135e:	6923      	ldr	r3, [r4, #16]
 8001360:	b94b      	cbnz	r3, 8001376 <__swsetup_r+0x7a>
 8001362:	89a3      	ldrh	r3, [r4, #12]
 8001364:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800136c:	d003      	beq.n	8001376 <__swsetup_r+0x7a>
 800136e:	4621      	mov	r1, r4
 8001370:	4628      	mov	r0, r5
 8001372:	f000 f83f 	bl	80013f4 <__smakebuf_r>
 8001376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800137a:	f013 0201 	ands.w	r2, r3, #1
 800137e:	d00a      	beq.n	8001396 <__swsetup_r+0x9a>
 8001380:	2200      	movs	r2, #0
 8001382:	60a2      	str	r2, [r4, #8]
 8001384:	6962      	ldr	r2, [r4, #20]
 8001386:	4252      	negs	r2, r2
 8001388:	61a2      	str	r2, [r4, #24]
 800138a:	6922      	ldr	r2, [r4, #16]
 800138c:	b942      	cbnz	r2, 80013a0 <__swsetup_r+0xa4>
 800138e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001392:	d1c5      	bne.n	8001320 <__swsetup_r+0x24>
 8001394:	bd38      	pop	{r3, r4, r5, pc}
 8001396:	0799      	lsls	r1, r3, #30
 8001398:	bf58      	it	pl
 800139a:	6962      	ldrpl	r2, [r4, #20]
 800139c:	60a2      	str	r2, [r4, #8]
 800139e:	e7f4      	b.n	800138a <__swsetup_r+0x8e>
 80013a0:	2000      	movs	r0, #0
 80013a2:	e7f7      	b.n	8001394 <__swsetup_r+0x98>
 80013a4:	2400000c 	.word	0x2400000c

080013a8 <__swhatbuf_r>:
 80013a8:	b570      	push	{r4, r5, r6, lr}
 80013aa:	460c      	mov	r4, r1
 80013ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013b0:	2900      	cmp	r1, #0
 80013b2:	b096      	sub	sp, #88	@ 0x58
 80013b4:	4615      	mov	r5, r2
 80013b6:	461e      	mov	r6, r3
 80013b8:	da0d      	bge.n	80013d6 <__swhatbuf_r+0x2e>
 80013ba:	89a3      	ldrh	r3, [r4, #12]
 80013bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80013c0:	f04f 0100 	mov.w	r1, #0
 80013c4:	bf14      	ite	ne
 80013c6:	2340      	movne	r3, #64	@ 0x40
 80013c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80013cc:	2000      	movs	r0, #0
 80013ce:	6031      	str	r1, [r6, #0]
 80013d0:	602b      	str	r3, [r5, #0]
 80013d2:	b016      	add	sp, #88	@ 0x58
 80013d4:	bd70      	pop	{r4, r5, r6, pc}
 80013d6:	466a      	mov	r2, sp
 80013d8:	f000 f8ae 	bl	8001538 <_fstat_r>
 80013dc:	2800      	cmp	r0, #0
 80013de:	dbec      	blt.n	80013ba <__swhatbuf_r+0x12>
 80013e0:	9901      	ldr	r1, [sp, #4]
 80013e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80013e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80013ea:	4259      	negs	r1, r3
 80013ec:	4159      	adcs	r1, r3
 80013ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013f2:	e7eb      	b.n	80013cc <__swhatbuf_r+0x24>

080013f4 <__smakebuf_r>:
 80013f4:	898b      	ldrh	r3, [r1, #12]
 80013f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013f8:	079d      	lsls	r5, r3, #30
 80013fa:	4606      	mov	r6, r0
 80013fc:	460c      	mov	r4, r1
 80013fe:	d507      	bpl.n	8001410 <__smakebuf_r+0x1c>
 8001400:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001404:	6023      	str	r3, [r4, #0]
 8001406:	6123      	str	r3, [r4, #16]
 8001408:	2301      	movs	r3, #1
 800140a:	6163      	str	r3, [r4, #20]
 800140c:	b003      	add	sp, #12
 800140e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001410:	ab01      	add	r3, sp, #4
 8001412:	466a      	mov	r2, sp
 8001414:	f7ff ffc8 	bl	80013a8 <__swhatbuf_r>
 8001418:	9f00      	ldr	r7, [sp, #0]
 800141a:	4605      	mov	r5, r0
 800141c:	4639      	mov	r1, r7
 800141e:	4630      	mov	r0, r6
 8001420:	f7ff fc26 	bl	8000c70 <_malloc_r>
 8001424:	b948      	cbnz	r0, 800143a <__smakebuf_r+0x46>
 8001426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800142a:	059a      	lsls	r2, r3, #22
 800142c:	d4ee      	bmi.n	800140c <__smakebuf_r+0x18>
 800142e:	f023 0303 	bic.w	r3, r3, #3
 8001432:	f043 0302 	orr.w	r3, r3, #2
 8001436:	81a3      	strh	r3, [r4, #12]
 8001438:	e7e2      	b.n	8001400 <__smakebuf_r+0xc>
 800143a:	89a3      	ldrh	r3, [r4, #12]
 800143c:	6020      	str	r0, [r4, #0]
 800143e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001442:	81a3      	strh	r3, [r4, #12]
 8001444:	9b01      	ldr	r3, [sp, #4]
 8001446:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800144a:	b15b      	cbz	r3, 8001464 <__smakebuf_r+0x70>
 800144c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001450:	4630      	mov	r0, r6
 8001452:	f000 f80b 	bl	800146c <_isatty_r>
 8001456:	b128      	cbz	r0, 8001464 <__smakebuf_r+0x70>
 8001458:	89a3      	ldrh	r3, [r4, #12]
 800145a:	f023 0303 	bic.w	r3, r3, #3
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	81a3      	strh	r3, [r4, #12]
 8001464:	89a3      	ldrh	r3, [r4, #12]
 8001466:	431d      	orrs	r5, r3
 8001468:	81a5      	strh	r5, [r4, #12]
 800146a:	e7cf      	b.n	800140c <__smakebuf_r+0x18>

0800146c <_isatty_r>:
 800146c:	b538      	push	{r3, r4, r5, lr}
 800146e:	4d06      	ldr	r5, [pc, #24]	@ (8001488 <_isatty_r+0x1c>)
 8001470:	2300      	movs	r3, #0
 8001472:	4604      	mov	r4, r0
 8001474:	4608      	mov	r0, r1
 8001476:	602b      	str	r3, [r5, #0]
 8001478:	f7ff f915 	bl	80006a6 <_isatty>
 800147c:	1c43      	adds	r3, r0, #1
 800147e:	d102      	bne.n	8001486 <_isatty_r+0x1a>
 8001480:	682b      	ldr	r3, [r5, #0]
 8001482:	b103      	cbz	r3, 8001486 <_isatty_r+0x1a>
 8001484:	6023      	str	r3, [r4, #0]
 8001486:	bd38      	pop	{r3, r4, r5, pc}
 8001488:	240001c4 	.word	0x240001c4

0800148c <_lseek_r>:
 800148c:	b538      	push	{r3, r4, r5, lr}
 800148e:	4d07      	ldr	r5, [pc, #28]	@ (80014ac <_lseek_r+0x20>)
 8001490:	4604      	mov	r4, r0
 8001492:	4608      	mov	r0, r1
 8001494:	4611      	mov	r1, r2
 8001496:	2200      	movs	r2, #0
 8001498:	602a      	str	r2, [r5, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	f7ff f90e 	bl	80006bc <_lseek>
 80014a0:	1c43      	adds	r3, r0, #1
 80014a2:	d102      	bne.n	80014aa <_lseek_r+0x1e>
 80014a4:	682b      	ldr	r3, [r5, #0]
 80014a6:	b103      	cbz	r3, 80014aa <_lseek_r+0x1e>
 80014a8:	6023      	str	r3, [r4, #0]
 80014aa:	bd38      	pop	{r3, r4, r5, pc}
 80014ac:	240001c4 	.word	0x240001c4

080014b0 <_read_r>:
 80014b0:	b538      	push	{r3, r4, r5, lr}
 80014b2:	4d07      	ldr	r5, [pc, #28]	@ (80014d0 <_read_r+0x20>)
 80014b4:	4604      	mov	r4, r0
 80014b6:	4608      	mov	r0, r1
 80014b8:	4611      	mov	r1, r2
 80014ba:	2200      	movs	r2, #0
 80014bc:	602a      	str	r2, [r5, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	f7ff f89c 	bl	80005fc <_read>
 80014c4:	1c43      	adds	r3, r0, #1
 80014c6:	d102      	bne.n	80014ce <_read_r+0x1e>
 80014c8:	682b      	ldr	r3, [r5, #0]
 80014ca:	b103      	cbz	r3, 80014ce <_read_r+0x1e>
 80014cc:	6023      	str	r3, [r4, #0]
 80014ce:	bd38      	pop	{r3, r4, r5, pc}
 80014d0:	240001c4 	.word	0x240001c4

080014d4 <_sbrk_r>:
 80014d4:	b538      	push	{r3, r4, r5, lr}
 80014d6:	4d06      	ldr	r5, [pc, #24]	@ (80014f0 <_sbrk_r+0x1c>)
 80014d8:	2300      	movs	r3, #0
 80014da:	4604      	mov	r4, r0
 80014dc:	4608      	mov	r0, r1
 80014de:	602b      	str	r3, [r5, #0]
 80014e0:	f7ff f8fa 	bl	80006d8 <_sbrk>
 80014e4:	1c43      	adds	r3, r0, #1
 80014e6:	d102      	bne.n	80014ee <_sbrk_r+0x1a>
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	b103      	cbz	r3, 80014ee <_sbrk_r+0x1a>
 80014ec:	6023      	str	r3, [r4, #0]
 80014ee:	bd38      	pop	{r3, r4, r5, pc}
 80014f0:	240001c4 	.word	0x240001c4

080014f4 <_write_r>:
 80014f4:	b538      	push	{r3, r4, r5, lr}
 80014f6:	4d07      	ldr	r5, [pc, #28]	@ (8001514 <_write_r+0x20>)
 80014f8:	4604      	mov	r4, r0
 80014fa:	4608      	mov	r0, r1
 80014fc:	4611      	mov	r1, r2
 80014fe:	2200      	movs	r2, #0
 8001500:	602a      	str	r2, [r5, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	f7ff f897 	bl	8000636 <_write>
 8001508:	1c43      	adds	r3, r0, #1
 800150a:	d102      	bne.n	8001512 <_write_r+0x1e>
 800150c:	682b      	ldr	r3, [r5, #0]
 800150e:	b103      	cbz	r3, 8001512 <_write_r+0x1e>
 8001510:	6023      	str	r3, [r4, #0]
 8001512:	bd38      	pop	{r3, r4, r5, pc}
 8001514:	240001c4 	.word	0x240001c4

08001518 <_close_r>:
 8001518:	b538      	push	{r3, r4, r5, lr}
 800151a:	4d06      	ldr	r5, [pc, #24]	@ (8001534 <_close_r+0x1c>)
 800151c:	2300      	movs	r3, #0
 800151e:	4604      	mov	r4, r0
 8001520:	4608      	mov	r0, r1
 8001522:	602b      	str	r3, [r5, #0]
 8001524:	f7ff f8a3 	bl	800066e <_close>
 8001528:	1c43      	adds	r3, r0, #1
 800152a:	d102      	bne.n	8001532 <_close_r+0x1a>
 800152c:	682b      	ldr	r3, [r5, #0]
 800152e:	b103      	cbz	r3, 8001532 <_close_r+0x1a>
 8001530:	6023      	str	r3, [r4, #0]
 8001532:	bd38      	pop	{r3, r4, r5, pc}
 8001534:	240001c4 	.word	0x240001c4

08001538 <_fstat_r>:
 8001538:	b538      	push	{r3, r4, r5, lr}
 800153a:	4d07      	ldr	r5, [pc, #28]	@ (8001558 <_fstat_r+0x20>)
 800153c:	2300      	movs	r3, #0
 800153e:	4604      	mov	r4, r0
 8001540:	4608      	mov	r0, r1
 8001542:	4611      	mov	r1, r2
 8001544:	602b      	str	r3, [r5, #0]
 8001546:	f7ff f89e 	bl	8000686 <_fstat>
 800154a:	1c43      	adds	r3, r0, #1
 800154c:	d102      	bne.n	8001554 <_fstat_r+0x1c>
 800154e:	682b      	ldr	r3, [r5, #0]
 8001550:	b103      	cbz	r3, 8001554 <_fstat_r+0x1c>
 8001552:	6023      	str	r3, [r4, #0]
 8001554:	bd38      	pop	{r3, r4, r5, pc}
 8001556:	bf00      	nop
 8001558:	240001c4 	.word	0x240001c4

0800155c <_free_r>:
 800155c:	b538      	push	{r3, r4, r5, lr}
 800155e:	4605      	mov	r5, r0
 8001560:	2900      	cmp	r1, #0
 8001562:	d041      	beq.n	80015e8 <_free_r+0x8c>
 8001564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001568:	1f0c      	subs	r4, r1, #4
 800156a:	2b00      	cmp	r3, #0
 800156c:	bfb8      	it	lt
 800156e:	18e4      	addlt	r4, r4, r3
 8001570:	f7ff fe36 	bl	80011e0 <__malloc_lock>
 8001574:	4a1d      	ldr	r2, [pc, #116]	@ (80015ec <_free_r+0x90>)
 8001576:	6813      	ldr	r3, [r2, #0]
 8001578:	b933      	cbnz	r3, 8001588 <_free_r+0x2c>
 800157a:	6063      	str	r3, [r4, #4]
 800157c:	6014      	str	r4, [r2, #0]
 800157e:	4628      	mov	r0, r5
 8001580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001584:	f7ff be32 	b.w	80011ec <__malloc_unlock>
 8001588:	42a3      	cmp	r3, r4
 800158a:	d908      	bls.n	800159e <_free_r+0x42>
 800158c:	6820      	ldr	r0, [r4, #0]
 800158e:	1821      	adds	r1, r4, r0
 8001590:	428b      	cmp	r3, r1
 8001592:	bf01      	itttt	eq
 8001594:	6819      	ldreq	r1, [r3, #0]
 8001596:	685b      	ldreq	r3, [r3, #4]
 8001598:	1809      	addeq	r1, r1, r0
 800159a:	6021      	streq	r1, [r4, #0]
 800159c:	e7ed      	b.n	800157a <_free_r+0x1e>
 800159e:	461a      	mov	r2, r3
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	b10b      	cbz	r3, 80015a8 <_free_r+0x4c>
 80015a4:	42a3      	cmp	r3, r4
 80015a6:	d9fa      	bls.n	800159e <_free_r+0x42>
 80015a8:	6811      	ldr	r1, [r2, #0]
 80015aa:	1850      	adds	r0, r2, r1
 80015ac:	42a0      	cmp	r0, r4
 80015ae:	d10b      	bne.n	80015c8 <_free_r+0x6c>
 80015b0:	6820      	ldr	r0, [r4, #0]
 80015b2:	4401      	add	r1, r0
 80015b4:	1850      	adds	r0, r2, r1
 80015b6:	4283      	cmp	r3, r0
 80015b8:	6011      	str	r1, [r2, #0]
 80015ba:	d1e0      	bne.n	800157e <_free_r+0x22>
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	6053      	str	r3, [r2, #4]
 80015c2:	4408      	add	r0, r1
 80015c4:	6010      	str	r0, [r2, #0]
 80015c6:	e7da      	b.n	800157e <_free_r+0x22>
 80015c8:	d902      	bls.n	80015d0 <_free_r+0x74>
 80015ca:	230c      	movs	r3, #12
 80015cc:	602b      	str	r3, [r5, #0]
 80015ce:	e7d6      	b.n	800157e <_free_r+0x22>
 80015d0:	6820      	ldr	r0, [r4, #0]
 80015d2:	1821      	adds	r1, r4, r0
 80015d4:	428b      	cmp	r3, r1
 80015d6:	bf04      	itt	eq
 80015d8:	6819      	ldreq	r1, [r3, #0]
 80015da:	685b      	ldreq	r3, [r3, #4]
 80015dc:	6063      	str	r3, [r4, #4]
 80015de:	bf04      	itt	eq
 80015e0:	1809      	addeq	r1, r1, r0
 80015e2:	6021      	streq	r1, [r4, #0]
 80015e4:	6054      	str	r4, [r2, #4]
 80015e6:	e7ca      	b.n	800157e <_free_r+0x22>
 80015e8:	bd38      	pop	{r3, r4, r5, pc}
 80015ea:	bf00      	nop
 80015ec:	240001c0 	.word	0x240001c0

080015f0 <_init>:
 80015f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015f2:	bf00      	nop
 80015f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015f6:	bc08      	pop	{r3}
 80015f8:	469e      	mov	lr, r3
 80015fa:	4770      	bx	lr

080015fc <_fini>:
 80015fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015fe:	bf00      	nop
 8001600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001602:	bc08      	pop	{r3}
 8001604:	469e      	mov	lr, r3
 8001606:	4770      	bx	lr
